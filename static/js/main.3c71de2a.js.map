{"version":3,"file":"static/js/main.3c71de2a.js","mappings":"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","sources":["src/components/ClickArea.jsx","src/components/Buildings.jsx","src/components/Stats.jsx","src/hooks/useGameState.js","src/hooks/useAudio.js","src/App.jsx","App.js","webpack/bootstrap","webpack/runtime/chunk loaded","webpack/runtime/compat get default export","webpack/runtime/define property getters","webpack/runtime/global","webpack/runtime/hasOwnProperty shorthand","webpack/runtime/make namespace object","webpack/runtime/publicPath","webpack/runtime/jsonp chunk loading","webpack/startup"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { View, Text, TouchableOpacity, StyleSheet, Animated, Platform, Dimensions, ImageBackground } from 'react-native';\nimport carbonTips from '../data/carbonTips.json';\n\nconst ClickArea = ({ onPress, clickValue, ecoPoints, pointsPerSecond, formatNumber, buildings }) => {\n  // Check if we're running on web\n  const isWeb = Platform.OS === 'web';\n  // Get screen dimensions to calculate responsive sizes\n  const { width, height } = Dimensions.get('window');\n\n  // Use the styles function with isWeb parameter\n  const currentStyles = styles(isWeb);\n  \n  // State for the tips display\n  const [currentTipIndex, setCurrentTipIndex] = useState(0);\n  const [shouldShowEcoTips, setShouldShowEcoTips] = useState(false);\n  \n  // Check if eco_education has been purchased (level > 0 or prestige > 0)\n  useEffect(() => {\n    if (buildings) {\n      const ecoEducation = buildings.find(building => building.id === 'eco_education');\n      setShouldShowEcoTips(ecoEducation && (ecoEducation.level > 0 || ecoEducation.prestigeLevel > 0));\n    }\n  }, [buildings]);\n  \n  // Change the tip every 30 seconds\n  useEffect(() => {\n    if (shouldShowEcoTips) {\n      const tipInterval = setInterval(() => {\n        setCurrentTipIndex(prevIndex => (prevIndex + 1) % carbonTips.length);\n      }, 30000);\n      \n      return () => clearInterval(tipInterval);\n    }\n  }, [shouldShowEcoTips]);\n\n  // Function to handle clicking on the tip to change it\n  const handleTipClick = () => {\n    setCurrentTipIndex(prevIndex => (prevIndex + 1) % carbonTips.length);\n  };\n\n  const [animations, setAnimations] = useState([]);\n  const [nextId, setNextId] = useState(0);\n\n  // Handle the click action\n  const handlePress = () => {\n    // Call the onPress from props\n    onPress();\n\n    // Create a new animation for visual feedback\n    const newAnim = {\n      id: nextId,\n      position: {\n        x: Math.random() * 80 - 40, // Random position near the click area\n        y: -20 - Math.random() * 30, // Start slightly above the click\n      },\n      opacity: new Animated.Value(1),\n      translateY: new Animated.Value(0),\n      value: `+${Number(clickValue).toFixed(2)}`, // Format to 2 decimal places\n    };\n\n    setNextId(nextId + 1);\n    setAnimations([...animations, newAnim]);\n\n    // Animate the point value floating up and fading\n    Animated.parallel([\n      Animated.timing(newAnim.opacity, {\n        toValue: 0,\n        duration: 1500,\n        useNativeDriver: true,\n      }),\n      Animated.timing(newAnim.translateY, {\n        toValue: -100,\n        duration: 1500,\n        useNativeDriver: true,\n      }),\n    ]).start(() => {\n      // Remove this animation from the array once it's done\n      setAnimations(animations => animations.filter(a => a.id !== newAnim.id));\n    });\n  };\n\n  return (\n    <ImageBackground \n      source={require('../../assets/background.png')}\n      style={[\n        currentStyles.backgroundImage,\n        isWeb && currentStyles.webBackgroundImage\n      ]}\n      imageStyle={currentStyles.backgroundImageStyle}\n    >\n      <View style={[\n        currentStyles.container,\n        isWeb && currentStyles.webContainer\n      ]}>\n        {/* Eco Tips Banner - Only shown when eco_education level > 0 */}\n        {shouldShowEcoTips && (\n          <TouchableOpacity \n            onPress={handleTipClick}\n            style={[\n              currentStyles.bannerContainer,\n              isWeb && currentStyles.webBannerContainer\n            ]}\n          >\n            <Text style={[\n              currentStyles.bannerTitle,\n              isWeb && currentStyles.webBannerTitle\n            ]}>💡 Eco Tip:</Text>\n            <Text style={[\n              currentStyles.bannerText,\n              isWeb && currentStyles.webBannerText\n            ]}>{carbonTips[currentTipIndex].tip}</Text>\n          </TouchableOpacity>\n        )}\n\n        {/* Prominently displayed eco points at the top */}\n        <View style={[\n          currentStyles.pointsDisplay,\n          isWeb && currentStyles.webPointsDisplay\n        ]}>\n          <Text style={[\n            currentStyles.pointsValue,\n            isWeb && currentStyles.webPointsValue\n          ]}>{formatNumber(ecoPoints)}</Text>\n          <Text style={[\n            currentStyles.pointsLabel,\n            isWeb && currentStyles.webPointsLabel\n          ]}>Eco Points</Text>\n        </View>\n\n        {/* Animations for the click effect */}\n        {animations.map(anim => (\n          <Animated.Text\n            key={anim.id}\n            style={[\n              currentStyles.floatingText,\n              {\n                opacity: anim.opacity,\n                transform: [\n                  { translateX: anim.position.x },\n                  { translateY: anim.translateY },\n                ],\n              },\n            ]}\n          >\n            {anim.value}\n          </Animated.Text>\n        ))}\n\n        {/* Main click button */}\n        <TouchableOpacity\n          style={[\n            currentStyles.clickButton,\n            isWeb && currentStyles.webClickButton\n          ]}\n          onPress={handlePress}\n          activeOpacity={0.7}\n        >\n          <View style={[\n            currentStyles.innerCircle,\n            isWeb && currentStyles.webInnerCircle\n          ]}>\n            <Text style={[\n              currentStyles.buttonText,\n              isWeb && currentStyles.webButtonText\n            ]}>🌍</Text>\n            <Text style={[\n              currentStyles.buttonSubtext,\n              isWeb && currentStyles.webButtonSubtext\n            ]}>Click to help!</Text>\n          </View>\n        </TouchableOpacity>\n\n        {/* Points per second below the earth button */}\n        <View style={[\n          currentStyles.pointsPerSecondContainer,\n          isWeb && currentStyles.webPointsPerSecondContainer\n        ]}>\n          <Text style={[\n            currentStyles.pointsPerSecondValue,\n            isWeb && currentStyles.webPointsPerSecondValue\n          ]}>+{formatNumber(pointsPerSecond)}</Text>\n          <Text style={[\n            currentStyles.pointsPerSecondLabel,\n            isWeb && currentStyles.webPointsPerSecondLabel\n          ]}>points per second</Text>\n        </View>\n      </View>\n    </ImageBackground>\n  );\n};\n\n// Convert styles to a function that takes isWeb as a parameter and calculates webScale internally\nconst styles = (isWeb) => {\n  const webScale = isWeb ? 1.5 : 1;\n\n  return StyleSheet.create({\n    backgroundImage: {\n      width: '100%',\n      alignItems: 'center',\n      justifyContent: 'center',\n      // Restricting the height to not influence other panels\n      height: 'auto',\n      overflow: 'hidden',\n    },\n    webBackgroundImage: {\n      width: '100%', \n      marginHorizontal: 'auto',\n    },\n    backgroundImageStyle: {\n      opacity: 0.3,\n      // Change from 'cover' to 'contain' to prevent overflow\n      resizeMode: 'contain',\n      width: '100%',\n      // Limit the height to prevent influencing other panels\n      height: '100%',\n      position: 'absolute',\n      top: 0,\n    },\n    container: {\n      alignItems: 'center',\n      justifyContent: 'center',\n      padding: 20,\n      paddingTop: 30, // Increased top padding to create more space from header\n      position: 'relative',\n      height: 'auto', // Changed to auto to accommodate the banner\n      minHeight: 340, // Minimum height\n      backgroundColor: 'rgba(232, 245, 233, 0.8)', // Make it slightly transparent to show background\n      borderRadius: 15,\n      marginVertical: 15, // Increased vertical margin\n      marginTop: 20, // Extra margin at the top\n      width: '100%',\n    },\n    webContainer: {\n      width: '80%',\n      maxWidth: 600,\n      height: 'auto',\n      minHeight: 340,\n      marginHorizontal: 'auto',\n    },\n    // New styles for the banner\n    bannerContainer: {\n      width: '100%',\n      backgroundColor: '#2196F3',\n      padding: 10,\n      borderRadius: 10,\n      marginBottom: 15,\n      shadowColor: '#000',\n      shadowOffset: { width: 0, height: 2 },\n      shadowOpacity: 0.2,\n      shadowRadius: 3,\n      elevation: 4,\n    },\n    webBannerContainer: {\n      width: '100%',\n      maxWidth: 550,\n    },\n    bannerTitle: {\n      fontSize: 16,\n      fontWeight: 'bold',\n      color: 'white',\n      marginBottom: 5,\n    },\n    webBannerTitle: {\n      fontSize: 16 * webScale,\n    },\n    bannerText: {\n      fontSize: 14,\n      color: 'white',\n      textAlign: 'center',\n    },\n    webBannerText: {\n      fontSize: 14 * webScale,\n    },\n    pointsDisplay: {\n      alignItems: 'center',\n      marginBottom: 25, // Increased bottom margin\n      backgroundColor: '#4CAF50',\n      paddingVertical: 14, // More vertical padding\n      paddingHorizontal: 35, // More horizontal padding\n      borderRadius: 30,\n      shadowColor: '#000',\n      shadowOffset: { width: 0, height: 4 }, // Stronger shadow\n      shadowOpacity: 0.35, // More opaque shadow\n      shadowRadius: 7, // Larger shadow radius\n      elevation: 10, // Higher elevation for Android\n      borderWidth: 2, // Add border\n      borderColor: '#388E3C', // Border color\n    },\n    webPointsDisplay: {\n      width: '100%',\n      maxWidth: 500,\n    },\n    pointsValue: {\n      fontSize: 38, // Larger font size\n      fontWeight: 'bold',\n      color: 'white',\n      textShadowColor: 'rgba(0, 0, 0, 0.2)', // Add text shadow\n      textShadowOffset: { width: 1, height: 1 },\n      textShadowRadius: 3,\n    },\n    webPointsValue: {\n      fontSize: 38 * webScale,\n    },\n    pointsLabel: {\n      fontSize: 16, // Larger label font\n      color: '#E8F5E9',\n      fontWeight: '600', // Slightly bolder\n      marginTop: 2, // Small space between value and label\n    },\n    webPointsLabel: {\n      fontSize: 16 * webScale,\n    },\n    clickButton: {\n      width: 150,\n      height: 150,\n      borderRadius: 75,\n      backgroundColor: '#4CAF50',\n      justifyContent: 'center',\n      alignItems: 'center',\n      shadowColor: '#000',\n      shadowOffset: { width: 0, height: 4 },\n      shadowOpacity: 0.3,\n      shadowRadius: 5,\n      elevation: 8,\n    },\n    webClickButton: {\n      width: 150 * webScale,\n      height: 150 * webScale,\n      borderRadius: 75 * webScale,\n    },\n    innerCircle: {\n      width: 130,\n      height: 130,\n      borderRadius: 65,\n      backgroundColor: '#81C784',\n      justifyContent: 'center',\n      alignItems: 'center',\n      borderWidth: 3,\n      borderColor: '#388E3C',\n    },\n    webInnerCircle: {\n      width: 130 * webScale,\n      height: 130 * webScale,\n      borderRadius: 65 * webScale,\n    },\n    buttonText: {\n      fontSize: 48,\n      marginBottom: 5,\n    },\n    webButtonText: {\n      fontSize: 48 * webScale,\n    },\n    buttonSubtext: {\n      fontSize: 12,\n      color: '#1B5E20',\n      fontWeight: 'bold',\n    },\n    webButtonSubtext: {\n      fontSize: 12 * webScale,\n    },\n    floatingText: {\n      position: 'absolute',\n      zIndex : 1,\n      fontSize: 30,\n      fontWeight: 'bold',\n      color: '#2f8032',\n    },\n    pointsPerSecondContainer: {\n      marginTop: 15,\n      alignItems: 'center',\n      backgroundColor: '#81C784',\n      paddingVertical: 6,\n      paddingHorizontal: 15,\n      borderRadius: 15,\n    },\n    webPointsPerSecondContainer: {\n      width: '100%',\n      maxWidth: 500,\n    },\n    pointsPerSecondValue: {\n      fontSize: 18,\n      fontWeight: 'bold',\n      color: 'white',\n    },\n    webPointsPerSecondValue: {\n      fontSize: 18 * webScale,\n    },\n    pointsPerSecondLabel: {\n      fontSize: 12,\n      color: '#E8F5E9',\n    },\n    webPointsPerSecondLabel: {\n      fontSize: 12 * webScale,\n    },\n    valueText: {\n      marginTop: 10,\n      fontSize: 16,\n      color: '#1B5E20',\n      fontWeight: '500',\n    },\n    webValueText: {\n      fontSize: 16 * webScale,\n    },\n  });\n};\n\nexport default ClickArea;","import React, { useMemo } from 'react';\nimport { View, Text, ScrollView, TouchableOpacity, StyleSheet } from 'react-native';\nimport carbonTips from '../data/carbonTips.json';\n\n// Building to eco fact mapping - match relevant facts to each building type\nconst buildingEcoFactMap = {\n  solar_panel: [15, 53, 58, 68, 72],\n  tree_plantation: [8, 43, 54, 79, 83],\n  eco_education: [98, 99, 100, 29, 14],\n  poop_recycling: [11, 96, 26, 61, 65],\n  hydro_power: [3, 12, 18, 34, 90],\n  community_garden: [22, 73, 7, 46, 85],\n  eco_research_lab: [23, 29, 57, 65, 92],\n  geothermal_plant: [9, 13, 21, 52, 70],\n  plastic_ocean_cleaner: [4, 16, 28, 36, 95],\n  carbon_capture: [66, 38, 47, 60, 70]\n};\n\nconst Buildings = ({ buildings, ecoPoints, onPurchase, prestigeBuilding, checkCanPrestige, getPrestigeBonus, getBuildingCost }) => {\n  // Filter buildings to only show unlocked ones, with a null check\n  const availableBuildings = buildings && Array.isArray(buildings) \n    ? buildings.filter(building => building.unlocked)\n    : [];\n\n  // Function to track building interactions\n  const trackBuildingInteraction = (buildingId) => {\n    // Create a custom event for building interactions\n    const event = new CustomEvent('buildingInteraction', { \n      detail: { buildingId } \n    });\n    document.dispatchEvent(event);\n  };\n\n  // Get a random eco fact for the given building\n  const getRandomEcoFact = (buildingId) => {\n    if (!buildingEcoFactMap[buildingId]) return null;\n    \n    const factIds = buildingEcoFactMap[buildingId];\n    const randomFactId = factIds[Math.floor(Math.random() * factIds.length)];\n    return carbonTips.find(tip => tip.id === randomFactId);\n  };\n\n  // Memoize eco facts to keep them stable during render cycles\n  const buildingEcoFacts = useMemo(() => {\n    const facts = {};\n    availableBuildings.forEach(building => {\n      facts[building.id] = getRandomEcoFact(building.id);\n    });\n    return facts;\n  }, [availableBuildings.map(b => b.id).join(',')]);\n\n  // Render a single building item\n  const renderBuildingItem = (building) => {\n    // Use the getBuildingCost function provided via props\n    const cost = getBuildingCost(building.id);\n    const canAfford = ecoPoints >= cost;\n    const maxLevel = building.level >= building.maxLevel;\n    const canPrestige = checkCanPrestige && checkCanPrestige(building.id);\n    // Use getPrestigeBonus function to get the consistent 10% value\n    const prestigeBonus = getPrestigeBonus(building.id);\n    const currentPrestigeBonus = building.prestigeLevel > 0 ? (building.prestigeLevel * prestigeBonus * 100).toFixed(0) : 0;\n    // Get the eco fact for this building\n    const ecoFact = buildingEcoFacts[building.id];\n    \n    return (\n      <TouchableOpacity\n        key={building.id}\n        style={[\n          styles.buildingItem,\n          maxLevel ? styles.maxedBuilding : \n            canAfford ? styles.affordableBuilding : styles.unaffordableBuilding\n        ]}\n        onPress={() => {\n          canPrestige ? prestigeBuilding(building.id) : onPurchase(building.id);\n          trackBuildingInteraction(building.id);\n        }}\n        disabled={!canAfford && !canPrestige}\n      >\n        <View style={styles.buildingIcon}>\n          <Text style={styles.iconText}>{building.icon}</Text>\n        </View>\n        \n        <View style={styles.buildingInfo}>\n          <View style={styles.buildingHeader}>\n            <Text style={styles.buildingName}>{building.name}</Text>\n            <Text style={styles.buildingLevel}>\n              Lvl {building.level}/{building.maxLevel}\n              {building.prestigeLevel > 0 && <Text style={styles.prestigeLevel}> 🌟{building.prestigeLevel}</Text>}\n            </Text>\n          </View>\n          \n          <Text style={styles.buildingDescription}>{building.description}</Text>\n          \n          {/* Display eco fact if available */}\n          {ecoFact && (\n            <Text style={styles.ecoFactText}>\n              Eco Fact: {ecoFact.tip}\n            </Text>\n          )}\n          \n          {building.prestigeLevel > 0 && (\n            <Text style={styles.prestigeBonus}>Current prestige bonus: +{currentPrestigeBonus}%</Text>\n          )}\n          \n          {canPrestige ? (\n            <View style={styles.prestigeContainer}>\n              <Text style={styles.prestigeText}>\n                Prestige now for +{(prestigeBonus * 100).toFixed(0)}% permanent bonus!\n              </Text>\n              <TouchableOpacity \n                style={styles.prestigeButton}\n                onPress={() => prestigeBuilding(building.id)}\n              >\n                <Text style={styles.prestigeButtonText}>PRESTIGE 🌟</Text>\n              </TouchableOpacity>\n            </View>\n          ) : (\n            <View style={styles.buildingFooter}>\n              <Text style={[\n                styles.costText,\n                maxLevel ? styles.maxedText : \n                  canAfford ? styles.affordableText : styles.unaffordableText\n              ]}>\n                {maxLevel ? 'MAX LEVEL' : `Cost: ${cost} eco points`}\n              </Text>\n              \n              {building.type === 'passive' && (\n                <Text style={styles.effectText}>\n                  +{(building.baseEffect * (building.level + 1) * (1 + (building.prestigeLevel * prestigeBonus || 0))).toFixed(1)} pts/sec\n                </Text>\n              )}\n              \n              {building.type === 'click' && (\n                <Text style={styles.effectText}>\n                  +{(building.baseEffect * (building.level + 1) * (1 + (building.prestigeLevel * prestigeBonus || 0))).toFixed(1)} per click\n                </Text>\n              )}\n              \n              {building.type === 'multiplier' && (\n                <Text style={styles.effectText}>\n                  +{(building.baseEffect * (building.level + 1) * (1 + (building.prestigeLevel * prestigeBonus || 0)) * 100).toFixed(1)}% bonus\n                </Text>\n              )}\n              \n              {building.type === 'hybrid' && (\n                <View>\n                  <Text style={styles.effectText}>\n                    +{(building.baseEffect * (building.level + 1) * (1 + (building.prestigeLevel * prestigeBonus || 0))).toFixed(1)} pts/sec\n                  </Text>\n                  <Text style={styles.effectText}>\n                    +{(building.clickEffect * (building.level + 1) * (1 + (building.prestigeLevel * prestigeBonus || 0))).toFixed(1)} per click\n                  </Text>\n                </View>\n              )}\n            </View>\n          )}\n        </View>\n      </TouchableOpacity>\n    );\n  };\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Buildings</Text>\n      \n      {availableBuildings.length === 0 ? (\n        <View style={styles.emptyContainer}>\n          <Text style={styles.emptyText}>No buildings available yet! Keep clicking to unlock more.</Text>\n        </View>\n      ) : (\n        <ScrollView style={styles.buildingsList}>\n          {availableBuildings.map(renderBuildingItem)}\n        </ScrollView>\n      )}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 10,\n    backgroundColor: '#E8F5E9',\n    borderRadius: 10,\n    marginVertical: 10,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: '#2E7D32',\n    marginBottom: 10,\n    textAlign: 'center',\n  },\n  buildingsList: {\n    flex: 1,\n  },\n  buildingItem: {\n    flexDirection: 'row',\n    borderRadius: 8,\n    padding: 12,\n    marginBottom: 10,\n    alignItems: 'center',\n  },\n  affordableBuilding: {\n    backgroundColor: '#C8E6C9',\n    borderWidth: 1,\n    borderColor: '#43A047',\n  },\n  unaffordableBuilding: {\n    backgroundColor: '#DCEDC8',\n    borderWidth: 1,\n    borderColor: '#AED581',\n    opacity: 0.8,\n  },\n  maxedBuilding: {\n    backgroundColor: '#B3E5FC',\n    borderWidth: 1,\n    borderColor: '#29B6F6',\n  },\n  buildingIcon: {\n    width: 50,\n    height: 50,\n    borderRadius: 25,\n    backgroundColor: '#FFFFFF',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginRight: 10,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 3,\n    elevation: 3,\n  },\n  iconText: {\n    fontSize: 24,\n  },\n  buildingInfo: {\n    flex: 1,\n  },\n  buildingHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 4,\n  },\n  buildingName: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    color: '#1B5E20',\n  },\n  buildingLevel: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: '#388E3C',\n  },\n  prestigeLevel: {\n    color: '#FF6F00',\n    fontWeight: 'bold',\n  },\n  buildingDescription: {\n    fontSize: 14,\n    color: '#33691E',\n    marginBottom: 6,\n  },\n  ecoFactText: {\n    fontSize: 12,\n    color: '#1B5E20',\n    fontStyle: 'italic',\n    marginBottom: 6,\n    backgroundColor: '#E8F5E9',\n    borderRadius: 4,\n    padding: 5,\n    borderLeftWidth: 3,\n    borderLeftColor: '#4CAF50',\n  },\n  prestigeBonus: {\n    fontSize: 12,\n    color: '#FF6F00',\n    fontWeight: 'bold',\n    marginBottom: 6,\n  },\n  buildingFooter: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  },\n  costText: {\n    fontSize: 14,\n    fontWeight: 'bold',\n  },\n  affordableText: {\n    color: '#2E7D32',\n  },\n  unaffordableText: {\n    color: '#BF360C',\n  },\n  maxedText: {\n    color: '#0288D1',\n  },\n  effectText: {\n    fontSize: 13,\n    color: '#33691E',\n    fontStyle: 'italic',\n  },\n  emptyContainer: {\n    padding: 20,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  emptyText: {\n    fontSize: 16,\n    color: '#689F38',\n    textAlign: 'center',\n  },\n  prestigeContainer: {\n    marginTop: 5,\n    backgroundColor: '#FFF3E0',\n    padding: 8,\n    borderRadius: 5,\n    borderWidth: 1,\n    borderColor: '#FFB74D',\n  },\n  prestigeText: {\n    fontSize: 13,\n    color: '#E65100',\n    marginBottom: 5,\n    textAlign: 'center',\n  },\n  prestigeButton: {\n    backgroundColor: '#FF9800',\n    paddingVertical: 5,\n    paddingHorizontal: 10,\n    borderRadius: 4,\n    alignSelf: 'center',\n  },\n  prestigeButtonText: {\n    color: 'white',\n    fontWeight: 'bold',\n    fontSize: 14,\n  },\n});\n\nexport default Buildings;","import React from 'react';\nimport { View, Text, StyleSheet, ScrollView } from 'react-native';\nimport achievementsData from '../data/achievements.json';\n\nconst Stats = ({ gameState }) => {\n  const { stats, resources, unlockedAchievements } = gameState;\n  \n  // Get full achievement objects by joining unlockedAchievements array with achievementsData\n  const unlockedAchievementObjects = unlockedAchievements\n    ? achievementsData.filter(achievement => unlockedAchievements.includes(achievement.id))\n    : [];\n  \n  // Get locked achievements by excluding unlocked ones\n  const lockedAchievementObjects = achievementsData.filter(\n    achievement => !unlockedAchievements || !unlockedAchievements.includes(achievement.id)\n  );\n\n  // Calculate achievements percentage\n  const achievementPercentage = Math.round((unlockedAchievementObjects.length / achievementsData.length) * 100);\n\n  // Format a large number with appropriate suffixes (K, M, B, T)\n  const formatNumber = (num) => {\n    if (num === undefined || num === null) return \"0\";\n    \n    if (num < 1000) return Math.floor(num).toLocaleString();\n    if (num < 1000000) return (Math.floor(num / 100) / 10).toFixed(1) + 'K';\n    if (num < 1000000000) return (Math.floor(num / 100000) / 10).toFixed(1) + 'M';\n    if (num < 1000000000000) return (Math.floor(num / 100000000) / 10).toFixed(1) + 'B';\n    return (Math.floor(num / 100000000000) / 10).toFixed(1) + 'T';\n  };\n\n  return (\n    <ScrollView style={styles.container}>\n      {/* Main Stats Dashboard */}\n      <View style={styles.dashboardContainer}>\n        <View style={styles.dashboardCard}>\n          <View style={styles.dashboardHeader}>\n            <Text style={styles.dashboardTitle}>🌎 Eco Impact Dashboard</Text>\n          </View>\n          \n          <View style={styles.statsGridContainer}>\n            <View style={styles.statsGridItem}>\n              <Text style={styles.statIcon}>🌱</Text>\n              <Text style={styles.statTitle}>Eco Points Earned</Text>\n              <Text style={styles.statValue}>{formatNumber(stats.totalEcoPoints)}</Text>\n            </View>\n            \n            <View style={styles.statsGridItem}>\n              <Text style={styles.statIcon}>👆</Text>\n              <Text style={styles.statTitle}>Total Clicks</Text>\n              <Text style={styles.statValue}>{formatNumber(stats.totalClicks)}</Text>\n            </View>\n            \n            <View style={styles.statsGridItem}>\n              <Text style={styles.statIcon}>🌳</Text>\n              <Text style={styles.statTitle}>Trees Planted</Text>\n              <Text style={styles.statValue}>{formatNumber(stats.treesPlanted)}</Text>\n            </View>\n            \n            <View style={styles.statsGridItem}>\n              <Text style={styles.statIcon}>☁️</Text>\n              <Text style={styles.statTitle}>CO₂ Reduced</Text>\n              <Text style={styles.statValue}>\n                {stats.co2Reduced < 1000 \n                  ? `${formatNumber(stats.co2Reduced)} kg` \n                  : `${(stats.co2Reduced / 1000).toFixed(1)} t`}\n              </Text>\n            </View>\n          </View>\n        </View>\n      </View>\n\n      {/* Game Progress */}\n      <View style={styles.sectionContainer}>\n        <View style={styles.sectionTitleContainer}>\n          <Text style={styles.sectionTitleIcon}>🏆</Text>\n          <Text style={styles.sectionTitle}>Game Progress</Text>\n        </View>\n        \n        <View style={styles.statsCard}>\n          <View style={styles.statsRow}>\n            <Text style={styles.statsLabel}>🔄 Buildings Prestiged:</Text>\n            <Text style={styles.statsValue}>{formatNumber(stats.totalPrestiges)}</Text>\n          </View>\n          \n          <View style={styles.statsRow}>\n            <Text style={styles.statsLabel}>🏅 Achievements Unlocked:</Text>\n            <Text style={styles.statsValue}>{unlockedAchievementObjects.length}/{achievementsData.length}</Text>\n          </View>\n          \n          <View style={styles.progressBarContainer}>\n            <View \n              style={[\n                styles.progressBar, \n                { width: `${achievementPercentage}%` }\n              ]} \n            />\n            <Text style={styles.progressPercentage}>{achievementPercentage}%</Text>\n          </View>\n        </View>\n      </View>\n\n      {/* Achievements Section */}\n      <View style={styles.sectionContainer}>\n        <View style={styles.sectionTitleContainer}>\n          <Text style={styles.sectionTitleIcon}>🏅</Text>\n          <Text style={styles.sectionTitle}>\n            Achievements ({unlockedAchievementObjects.length}/{achievementsData.length})\n          </Text>\n        </View>\n        \n        <ScrollView style={styles.achievementsScrollView}>\n          <View style={styles.achievementsContainer}>\n            {unlockedAchievementObjects.map(achievement => (\n              <View key={achievement.id} style={styles.achievementItem}>\n                <Text style={styles.achievementIcon}>{achievement.icon || '🏆'}</Text>\n                <View style={styles.achievementInfo}>\n                  <Text style={styles.achievementName}>{achievement.name}</Text>\n                  <Text style={styles.achievementDescription}>{achievement.description}</Text>\n                </View>\n              </View>\n            ))}\n            \n            {lockedAchievementObjects.map(achievement => (\n              <View key={achievement.id} style={[styles.achievementItem, styles.lockedAchievement]}>\n                <Text style={styles.achievementIcon}>🔒</Text>\n                <View style={styles.achievementInfo}>\n                  <Text style={styles.lockedAchievementName}>???</Text>\n                  <Text style={styles.lockedAchievementDescription}>Keep playing to unlock!</Text>\n                </View>\n              </View>\n            ))}\n          </View>\n        </ScrollView>\n      </View>\n    </ScrollView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 10,\n    backgroundColor: '#F8FBF8',\n  },\n  // Dashboard styling\n  dashboardContainer: {\n    marginBottom: 20,\n  },\n  dashboardCard: {\n    backgroundColor: '#43A047',\n    borderRadius: 12,\n    padding: 15,\n    elevation: 4,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n  },\n  dashboardHeader: {\n    alignItems: 'center',\n    marginBottom: 15,\n  },\n  dashboardTitle: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: 'white',\n  },\n  statsGridContainer: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    justifyContent: 'space-between',\n  },\n  statsGridItem: {\n    width: '48%',\n    backgroundColor: 'rgba(255, 255, 255, 0.9)',\n    borderRadius: 8,\n    padding: 15,\n    marginBottom: 10,\n    alignItems: 'center',\n  },\n  statIcon: {\n    fontSize: 24,\n    marginBottom: 5,\n  },\n  statTitle: {\n    fontSize: 12,\n    color: '#388E3C',\n    textAlign: 'center',\n  },\n  statValue: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: '#1B5E20',\n    textAlign: 'center',\n  },\n  \n  // Section styling\n  sectionContainer: {\n    marginBottom: 20,\n  },\n  sectionTitleContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 10,\n  },\n  sectionTitleIcon: {\n    fontSize: 20,\n    marginRight: 8,\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: '#2E7D32',\n  },\n  statsCard: {\n    backgroundColor: '#E8F5E9',\n    borderRadius: 12,\n    padding: 15,\n    elevation: 2,\n  },\n  statsRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 12,\n  },\n  statsLabel: {\n    fontSize: 14,\n    color: '#388E3C',\n  },\n  statsValue: {\n    fontSize: 14,\n    fontWeight: 'bold',\n    color: '#1B5E20',\n  },\n  \n  // Progress bar\n  progressBarContainer: {\n    height: 12,\n    backgroundColor: '#C8E6C9',\n    borderRadius: 6,\n    marginVertical: 5,\n    overflow: 'hidden',\n    position: 'relative',\n  },\n  progressBar: {\n    height: '100%',\n    backgroundColor: '#4CAF50',\n    borderRadius: 6,\n  },\n  progressPercentage: {\n    position: 'absolute',\n    right: 5,\n    top: -1,\n    fontSize: 10,\n    color: '#fff',\n    fontWeight: 'bold',\n  },\n  \n  // Achievements\n  achievementsScrollView: {\n    maxHeight: 300,\n    borderRadius: 12,\n  },\n  achievementsContainer: {\n    marginTop: 5,\n  },\n  achievementItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: '#C8E6C9',\n    borderRadius: 10,\n    padding: 12,\n    marginBottom: 8,\n    elevation: 1,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.1,\n    shadowRadius: 2,\n  },\n  lockedAchievement: {\n    backgroundColor: '#F1F8E9',\n    opacity: 0.7,\n  },\n  achievementIcon: {\n    fontSize: 28,\n    marginRight: 12,\n  },\n  achievementInfo: {\n    flex: 1,\n  },\n  achievementName: {\n    fontSize: 14,\n    fontWeight: 'bold',\n    color: '#1B5E20',\n    marginBottom: 3,\n  },\n  achievementDescription: {\n    fontSize: 12,\n    color: '#33691E',\n  },\n  lockedAchievementName: {\n    fontSize: 14,\n    fontWeight: 'bold',\n    color: '#689F38',\n  },\n  lockedAchievementDescription: {\n    fontSize: 12,\n    color: '#689F38',\n    fontStyle: 'italic',\n  },\n});\n\nexport default Stats;","import { useState, useEffect, useCallback, useRef } from 'react';\nimport buildingsData from '../data/buildings.json';\nimport achievementsData from '../data/achievements.json';\n\n// Define the hardcoded prestige bonus value for all buildings\nconst PRESTIGE_BONUS = 0.1; // 10% bonus per prestige level\n\n// Helper function to safely merge saved data with default structure\nconst deepMerge = (defaultObj, savedObj) => {\n  // If saved object doesn't exist, use default\n  if (!savedObj) return defaultObj;\n  \n  const result = { ...defaultObj };\n  \n  // Iterate through properties of default object\n  Object.keys(defaultObj).forEach(key => {\n    // If saved object has this key\n    if (key in savedObj) {\n      // Handle arrays specially (like buildings and achievements)\n      if (Array.isArray(defaultObj[key])) {\n        // If we have default array items with IDs, merge them individually by ID\n        if (defaultObj[key].length > 0 && defaultObj[key][0] && 'id' in defaultObj[key][0]) {\n          result[key] = defaultObj[key].map(defaultItem => {\n            // Try to find corresponding saved item by id\n            const savedItem = savedObj[key].find(item => item.id === defaultItem.id);\n            // If found, merge them, otherwise use default\n            return savedItem ? { ...defaultItem, ...savedItem } : defaultItem;\n          });\n          \n          // Add any saved items that don't exist in default (for backward compatibility)\n          const defaultIds = result[key].map(item => item.id);\n          const newItems = savedObj[key]\n            .filter(item => item.id && !defaultIds.includes(item.id));\n          \n          result[key] = [...result[key], ...newItems];\n        } else {\n          // For regular arrays without IDs, use saved array if it exists\n          result[key] = savedObj[key];\n        }\n      } \n      // Handle nested objects with recursive merge\n      else if (typeof defaultObj[key] === 'object' && defaultObj[key] !== null) {\n        result[key] = deepMerge(defaultObj[key], savedObj[key]);\n      } \n      // For primitive values, use the saved value\n      else {\n        result[key] = savedObj[key];\n      }\n    }\n    // If key doesn't exist in saved object, default value remains\n  });\n  \n  return result;\n};\n\n// Define the initial game state\nconst initialState = {\n  resources: {\n    ecoPoints: 0,\n    carbonOffset: 0,\n    renewableEnergy: 0,\n  },\n  stats: {\n    totalClicks: 0,\n    totalEcoPoints: 0,\n    treesPlanted: 0,\n    co2Reduced: 0,\n    totalPrestiges: 0,\n    buildingInteractions: {} // Track interactions for each building\n  },\n  multipliers: {\n    clickMultiplier: 1,\n    passiveMultiplier: 1,\n  },\n  // Store only essential building data instead of full building objects\n  buildingsState: buildingsData.map(building => ({\n    id: building.id,\n    level: 0,\n    prestigeLevel: 0,\n    unlocked: building.unlocked || false,\n    stats: building.stats ? { ...building.stats } : {}\n  })),\n  // Store only IDs of unlocked achievements instead of full achievement data\n  unlockedAchievements: [],\n  notifications: [],\n  settings: {\n    soundEnabled: true,\n    particlesEnabled: true,\n  },\n  lastSaved: null,\n  lastAutoSave: null,\n};\n\n// Calculate building cost based on base cost, current level, and prestige level\nconst calculateBuildingCost = (baseCost, level, prestigeLevel) => {\n  // Increase base cost by 50% for each prestige level\n  const prestigedBaseCost = baseCost * Math.pow(1.5, prestigeLevel);\n  return Math.floor(prestigedBaseCost * Math.pow(1.15, level));\n};\n\n// Calculate the total points per second from passive buildings\nconst calculatePointsPerSecond = (buildings, multipliers) => {\n  if (!Array.isArray(buildings)) return 0;\n  if (!multipliers) multipliers = { passiveMultiplier: 1 };\n  \n  return buildings\n    .filter(building => (building.type === 'passive' || building.type === 'hybrid') && building.level > 0)\n    .reduce((sum, building) => {\n      // Include prestige bonus in calculation - use hardcoded value\n      const prestigeBonus = 1 + (building.prestigeLevel * PRESTIGE_BONUS);\n      return sum + (building.baseEffect * building.level * prestigeBonus);\n    }, 0) * multipliers.passiveMultiplier;\n};\n\n// Calculate the click value based on buildings\nconst calculateClickValue = (buildings, multipliers) => {\n  const baseClick = 1;\n  \n  if (!Array.isArray(buildings)) return baseClick;\n  if (!multipliers) multipliers = { clickMultiplier: 1 };\n  \n  const clickBonus = buildings\n    .filter(building => (building.type === 'click' || building.type === 'hybrid') && building.level > 0)\n    .reduce((sum, building) => {\n      // Include prestige bonus in calculation - use hardcoded value\n      const prestigeBonus = 1 + (building.prestigeLevel * PRESTIGE_BONUS);\n      // Use clickEffect for hybrid buildings, baseEffect for click buildings\n      const effect = building.type === 'hybrid' ? building.clickEffect : building.baseEffect;\n      return sum + (effect * building.level * prestigeBonus);\n    }, 0);\n  \n  return (baseClick + clickBonus) * multipliers.clickMultiplier;\n};\n\n// Helper function to merge building state with full building data from JSON\nconst mergeFullBuildingData = (buildingsState) => {\n  return buildingsData.map(buildingData => {\n    // Find the saved state for this building\n    const buildingState = buildingsState.find(b => b.id === buildingData.id) || {\n      id: buildingData.id,\n      level: 0,\n      prestigeLevel: 0,\n      unlocked: buildingData.unlocked || false,\n      stats: buildingData.stats ? { ...buildingData.stats } : {}\n    };\n    \n    // Merge the full building data with the saved state\n    return {\n      ...buildingData,\n      level: buildingState.level,\n      prestigeLevel: buildingState.prestigeLevel,\n      unlocked: buildingState.unlocked,\n      stats: buildingState.stats\n    };\n  });\n};\n\n// Check if an achievement should be unlocked\nconst checkAchievementCondition = (achievement, gameState) => {\n  const buildings = gameState.buildings || [];\n  \n  switch (achievement.conditionType) {\n    case 'totalClicks':\n      return gameState.stats.totalClicks >= achievement.conditionValue;\n    case 'totalEcoPoints':\n      return gameState.stats.totalEcoPoints >= achievement.conditionValue;\n    case 'totalBuildings':\n      const totalBuildings = buildings.reduce((sum, building) => sum + building.level, 0);\n      return totalBuildings >= achievement.conditionValue;\n    case 'totalPrestiges':\n      return gameState.stats.totalPrestiges >= achievement.conditionValue;\n    case 'treesPlanted':\n      return gameState.stats.treesPlanted >= achievement.conditionValue;\n    case 'co2Reduced':\n      return gameState.stats.co2Reduced >= achievement.conditionValue;\n    case 'buildingLevel':\n      const building = buildings.find(b => b.id === achievement.conditionBuilding);\n      return building && building.level >= achievement.conditionValue;\n    case 'buildingInteractions':\n      // Check interactions with a specific building\n      const interactions = gameState.stats.buildingInteractions[achievement.conditionBuilding] || 0;\n      return interactions >= achievement.conditionValue;\n    default:\n      return false;\n  }\n};\n\nconst useGameState = () => {\n  // Add shouldReset state to track reset requests\n  const [shouldReset, setShouldReset] = useState(false);\n  // Add ref for tracking if there are pending changes to save\n  const hasPendingChanges = useRef(false);\n  // Add ref for tracking when the last auto-save happened\n  const lastAutoSaveTime = useRef(new Date());\n  // Add ref for storing the previous state to compare for changes\n  const prevStateRef = useRef(null);\n  \n  const [gameState, setGameState] = useState(() => {\n    // Try to load the game state from localStorage\n    const savedState = localStorage.getItem('ecoClickerSave');\n    if (savedState) {\n      try {\n        const parsedState = JSON.parse(savedState);\n        \n        // Add any missing fields from the initial state (for compatibility)\n        const mergedState = deepMerge(initialState, parsedState);\n        \n        // Convert legacy saves that have full building data to the new format\n        if (mergedState.buildings && !mergedState.buildingsState) {\n          // Extract just the dynamic data from buildings\n          mergedState.buildingsState = mergedState.buildings.map(building => ({\n            id: building.id,\n            level: building.level || 0,\n            prestigeLevel: building.prestigeLevel || 0,\n            unlocked: building.unlocked || false,\n            stats: building.stats || {}\n          }));\n          \n          // Delete the old buildings array\n          delete mergedState.buildings;\n        }\n        \n        // Combine building state with full building data\n        const fullState = {\n          ...mergedState,\n          // Merge the minimal building state with full building definitions\n          buildings: mergeFullBuildingData(mergedState.buildingsState || [])\n        };\n        \n        // Initialize the previous state ref\n        prevStateRef.current = JSON.stringify({\n          ...fullState,\n          lastSaved: null,\n          lastAutoSave: null\n        });\n        \n        return fullState;\n      } catch (error) {\n        console.error('Failed to parse saved game state:', error);\n        // Delete corrupted save data\n        localStorage.removeItem('ecoClickerSave');\n        \n        // Initialize with default state including full building data\n        const fullState = {\n          ...initialState,\n          buildings: mergeFullBuildingData(initialState.buildingsState)\n        };\n        prevStateRef.current = JSON.stringify({\n          ...fullState,\n          lastSaved: null,\n          lastAutoSave: null\n        });\n        return fullState;\n      }\n    }\n    \n    // Initialize with default state including full building data\n    const fullState = {\n      ...initialState,\n      buildings: mergeFullBuildingData(initialState.buildingsState)\n    };\n    prevStateRef.current = JSON.stringify({\n      ...fullState,\n      lastSaved: null,\n      lastAutoSave: null\n    });\n    return fullState;\n  });\n\n  // Compare current state with previous state to detect actual changes\n  const hasStateChanged = useCallback((currentState) => {\n    // Skip timestamp fields in comparison\n    const stateForComparison = { \n      ...currentState,\n      lastSaved: null,\n      lastAutoSave: null \n    };\n    \n    const currentStateStr = JSON.stringify(stateForComparison);\n    const hasChanged = currentStateStr !== prevStateRef.current;\n    \n    if (hasChanged) {\n      // Update the reference for future comparisons\n      prevStateRef.current = currentStateStr;\n    }\n    \n    return hasChanged;\n  }, []);\n\n  // Save game state to localStorage whenever it changes\n  useEffect(() => {\n    // Only mark changes as pending if actual game state has changed\n    if (hasStateChanged(gameState)) {\n      hasPendingChanges.current = true;\n    }\n    \n    // Auto-save function\n    const saveGame = () => {\n      // Check if we should reset the game first\n      if (shouldReset) {\n        // Create a proper initial state with buildings included\n        const fullInitialState = {\n          ...initialState,\n          buildings: mergeFullBuildingData(initialState.buildingsState),\n          lastSaved: new Date().toISOString(),\n          lastAutoSave: new Date().toISOString()\n        };\n        \n        // Create a state for saving that omits the full building data\n        const stateToSave = {\n          ...initialState,\n          lastSaved: new Date().toISOString(),\n          lastAutoSave: new Date().toISOString()\n        };\n        \n        // Save to localStorage\n        localStorage.setItem('ecoClickerSave', JSON.stringify(stateToSave));\n        \n        // Reset the flag\n        setShouldReset(false);\n        \n        // Update the current state with buildings included\n        setGameState(fullInitialState);\n        \n        // Reset pending changes flag to prevent further saves after reset\n        hasPendingChanges.current = false;\n        \n        // Reset the previous state reference to match the new initial state\n        prevStateRef.current = JSON.stringify({\n          ...fullInitialState,\n          lastSaved: null,\n          lastAutoSave: null\n        });\n        \n        // Reset the auto-save timer\n        lastAutoSaveTime.current = new Date();\n        \n        console.log('Game has been reset and saved with default values');\n        \n        // Reload the window for a completely fresh state\n        window.location.reload();\n      }\n      \n      // Only save if there are pending changes\n      if (hasPendingChanges.current) {\n        // Update timestamps\n        const now = new Date();\n        \n        // Extract only essential building data for saving\n        const buildingsState = gameState.buildings && Array.isArray(gameState.buildings) ? \n          gameState.buildings.map(building => ({\n            id: building.id,\n            level: building.level,\n            prestigeLevel: building.prestigeLevel,\n            unlocked: building.unlocked,\n            stats: building.stats || {}\n          })) : \n          initialState.buildingsState;\n        \n        // Create state object with minimal data for saving\n        const stateToSave = {\n          ...gameState,\n          // Replace full buildings with minimal buildingsState\n          buildings: undefined, // Remove full building data\n          buildingsState, // Store minimal building data\n          lastSaved: now.toISOString(),\n          lastAutoSave: now.toISOString()\n        };\n        \n        // Save to localStorage\n        localStorage.setItem('ecoClickerSave', JSON.stringify(stateToSave));\n        \n        // Reset the pending changes flag\n        hasPendingChanges.current = false;\n        \n        // Update the last auto-save time\n        lastAutoSaveTime.current = now;\n        \n        // Update game state with the new timestamps without triggering another save\n        setGameState(prevState => {\n          const newState = {\n            ...prevState,\n            lastSaved: now.toISOString(),\n            lastAutoSave: now.toISOString()\n          };\n          // We've already saved this state, so update prevStateRef to avoid detecting this as a change\n          prevStateRef.current = JSON.stringify({...newState, lastSaved: null, lastAutoSave: null});\n          return newState;\n        });\n      }\n    };\n\n    // Auto-save every 30 seconds\n    const saveInterval = setInterval(() => {\n      // Calculate time since last auto-save\n      const now = new Date();\n      const timeSinceLastSave = now.getTime() - lastAutoSaveTime.current.getTime();\n      const THIRTY_SECONDS = 30 * 1000;\n      \n      // Only save if enough time has passed or if there are pending changes\n      if (timeSinceLastSave >= THIRTY_SECONDS && hasPendingChanges.current) {\n        saveGame();\n      }\n    }, 1000); // Check every second, but only save if needed\n    \n    // Manual save on unmount\n    return () => {\n      clearInterval(saveInterval);\n      if (hasPendingChanges.current) {\n        saveGame();\n      }\n    };\n  }, [gameState, shouldReset]);\n\n  // Passive income effect - runs every second\n  useEffect(() => {\n    const pointsPerSecond = calculatePointsPerSecond(gameState.buildings, gameState.multipliers);\n    \n    if (pointsPerSecond > 0) {\n      const timer = setInterval(() => {\n        setGameState(prevState => {\n          // Find the tree plantation building\n          const treePlantation = prevState.buildings.find(b => b.id === 'tree_plantation');\n          \n          // Calculate points generated by tree plantation only, with prestige bonus\n          let treesPlanted = 0;\n          if (treePlantation && treePlantation.level > 0) {\n            const prestigeBonus = 1 + (treePlantation.prestigeLevel * PRESTIGE_BONUS);\n            // Plant 1 tree for each level of tree plantation per second\n            treesPlanted = treePlantation.level * 1;\n          }\n          \n          // CO2 reduction is still based on all eco points (0.05kg per point)\n          const co2ToReduce = pointsPerSecond * 0.05;\n          \n          // Update the building's stats\n          let updatedBuildings = [...prevState.buildings];\n          if (treePlantation) {\n            const treeIndex = updatedBuildings.findIndex(b => b.id === 'tree_plantation');\n            if (treeIndex !== -1) {\n              updatedBuildings[treeIndex] = {\n                ...updatedBuildings[treeIndex],\n                stats: {\n                  ...updatedBuildings[treeIndex].stats,\n                  treesPlanted: (updatedBuildings[treeIndex].stats?.treesPlanted || 0) + treesPlanted\n                }\n              };\n            }\n          }\n          \n          return {\n            ...prevState,\n            buildings: updatedBuildings,\n            resources: {\n              ...prevState.resources,\n              ecoPoints: prevState.resources.ecoPoints + pointsPerSecond,\n            },\n            stats: {\n              ...prevState.stats,\n              totalEcoPoints: prevState.stats.totalEcoPoints + pointsPerSecond,\n              treesPlanted: prevState.stats.treesPlanted + treesPlanted,\n              co2Reduced: prevState.stats.co2Reduced + co2ToReduce,\n            },\n          };\n        });\n      }, 1000);\n      \n      return () => clearInterval(timer);\n    }\n  }, [gameState.buildings, gameState.multipliers]);\n\n  // Notification management - auto-remove after 5 seconds\n  useEffect(() => {\n    if (gameState.notifications.length > 0) {\n      const timer = setTimeout(() => {\n        setGameState(prevState => ({\n          ...prevState,\n          notifications: prevState.notifications.slice(1), // Remove the oldest notification\n        }));\n      }, 5000); // Changed back from 1000 to 5000 milliseconds\n      \n      return () => clearTimeout(timer);\n    }\n  }, [gameState.notifications]);\n\n  // Listen for building interactions\n  useEffect(() => {\n    const handleBuildingInteraction = (event) => {\n      const { buildingId } = event.detail;\n      \n      // Update interactions count for this specific building\n      setGameState(prevState => {\n        const buildingInteractions = {\n          ...prevState.stats.buildingInteractions,\n          [buildingId]: (prevState.stats.buildingInteractions[buildingId] || 0) + 1\n        };\n        \n        return {\n          ...prevState,\n          stats: {\n            ...prevState.stats,\n            buildingInteractions\n          }\n        };\n      });\n    };\n\n    // Add event listener\n    document.addEventListener('buildingInteraction', handleBuildingInteraction);\n    \n    // Clean up\n    return () => {\n      document.removeEventListener('buildingInteraction', handleBuildingInteraction);\n    };\n  }, []);\n\n  // Check for newly unlocked buildings and achievements\n  useEffect(() => {\n    let hasChanges = false;\n    const newState = { ...gameState };\n    const newNotifications = [...gameState.notifications];\n\n    // Check for buildings to unlock\n    newState.buildings = gameState.buildings.map(building => {\n      if (!building.unlocked && building.unlockAt && gameState.resources.ecoPoints >= building.unlockAt) {\n        hasChanges = true;\n        // Add notification for unlocked building at the beginning of the array\n        newNotifications.unshift({\n          id: `building-${building.id}`,\n          type: 'building',\n          title: 'New Building Unlocked!',\n          message: `${building.name} (${building.icon}) is now available for purchase!`,\n          icon: building.icon,\n        });\n        return { ...building, unlocked: true };\n      }\n      return building;\n    });\n\n    // Check for achievements to unlock\n    // Loop through all achievements in achievementsData\n    for (const achievement of achievementsData) {\n      // Check if the achievement is not already unlocked\n      if (!gameState.unlockedAchievements.includes(achievement.id) && \n          checkAchievementCondition(achievement, gameState)) {\n        hasChanges = true;\n        \n        // Add the achievement ID to the unlocked achievements list\n        newState.unlockedAchievements = [...(newState.unlockedAchievements || []), achievement.id];\n        \n        // Add notification for unlocked achievement at the beginning of the array\n        newNotifications.unshift({\n          id: `achievement-${achievement.id}`,\n          type: 'achievement',\n          title: 'Achievement Unlocked!',\n          message: `${achievement.name}: ${achievement.description}`,\n          condition: achievement.conditionText,\n          icon: achievement.icon,\n        });\n      }\n    }\n\n    if (hasChanges) {\n      setGameState({\n        ...newState,\n        notifications: newNotifications,\n      });\n    }\n  }, [gameState.resources, gameState.stats, gameState.buildings, gameState.unlockedAchievements]);\n\n  // Handle clicking on the main clicker area\n  const handleClick = () => {\n    const clickValue = calculateClickValue(gameState.buildings, gameState.multipliers);\n    \n    // CO2 reduction is still based on all eco points (0.05kg per point)\n    const co2ToReduce = clickValue * 0.05;\n    \n    setGameState(prevState => ({\n      ...prevState,\n      resources: {\n        ...prevState.resources,\n        ecoPoints: prevState.resources.ecoPoints + clickValue,\n      },\n      stats: {\n        ...prevState.stats,\n        totalClicks: prevState.stats.totalClicks + 1,\n        totalEcoPoints: prevState.stats.totalEcoPoints + clickValue,\n        // No trees planted from clicking - only from Tree Plantation building\n        co2Reduced: prevState.stats.co2Reduced + co2ToReduce,\n      },\n    }));\n  };\n\n  // Handle purchasing a building\n  const purchaseBuilding = (buildingId) => {\n    const buildingIndex = gameState.buildings.findIndex(b => b.id === buildingId);\n    \n    if (buildingIndex === -1) return false;\n    \n    const building = gameState.buildings[buildingIndex];\n    \n    // Check if we can purchase this building\n    if (building.level >= building.maxLevel) return false;\n    \n    // Use the updated cost calculation that includes prestige level\n    const cost = calculateBuildingCost(building.baseCost, building.level, building.prestigeLevel);\n    \n    if (gameState.resources.ecoPoints < cost) return false;\n    \n    const newBuildings = [...gameState.buildings];\n    newBuildings[buildingIndex] = {\n      ...building,\n      level: building.level + 1,\n    };\n    \n    // Update multipliers if it's a multiplier building\n    let newMultipliers = { ...gameState.multipliers };\n    if (building.type === 'multiplier') {\n      const prestigeBonus = 1 + (building.prestigeLevel * PRESTIGE_BONUS);\n      const effectValue = building.baseEffect * prestigeBonus;\n      \n      newMultipliers = {\n        clickMultiplier: gameState.multipliers.clickMultiplier + effectValue,\n        passiveMultiplier: gameState.multipliers.passiveMultiplier + effectValue,\n      };\n    }\n    \n    setGameState(prevState => ({\n      ...prevState,\n      resources: {\n        ...prevState.resources,\n        ecoPoints: prevState.resources.ecoPoints - cost,\n      },\n      buildings: newBuildings,\n      multipliers: newMultipliers,\n    }));\n    \n    return true;\n  };\n\n  // Handle prestiging a building\n  const prestigeBuilding = (buildingId) => {\n    const buildingIndex = gameState.buildings.findIndex(b => b.id === buildingId);\n    \n    if (buildingIndex === -1) return false;\n    \n    const building = gameState.buildings[buildingIndex];\n    \n    // Can only prestige if building is at max level\n    if (building.level < building.maxLevel) return false;\n    \n    const newBuildings = [...gameState.buildings];\n    newBuildings[buildingIndex] = {\n      ...building,\n      level: 0, // Reset level\n      prestigeLevel: building.prestigeLevel + 1, // Increase prestige level\n    };\n    \n    // Reset multipliers if it's a multiplier building\n    let newMultipliers = { ...gameState.multipliers };\n    if (building.type === 'multiplier') {\n      // Remove old effect and add new effect with prestige bonus\n      const oldEffect = building.baseEffect * building.level;\n      const newPrestigeBonus = 1 + ((building.prestigeLevel + 1) * PRESTIGE_BONUS);\n      \n      newMultipliers = {\n        clickMultiplier: gameState.multipliers.clickMultiplier - oldEffect,\n        passiveMultiplier: gameState.multipliers.passiveMultiplier - oldEffect,\n      };\n    }\n    \n    // Add notification for prestige at the beginning of the array\n    const newNotifications = [...gameState.notifications];\n    newNotifications.unshift({\n      id: `prestige-${building.id}-${Date.now()}`,\n      type: 'prestige',\n      title: 'Building Prestiged!',\n      message: `${building.name} has been prestiged to level ${building.prestigeLevel + 1}!`,\n      icon: '🌟',\n    });\n    \n    setGameState(prevState => ({\n      ...prevState,\n      buildings: newBuildings,\n      multipliers: newMultipliers,\n      stats: {\n        ...prevState.stats,\n        totalPrestiges: prevState.stats.totalPrestiges + 1,\n      },\n      notifications: newNotifications,\n    }));\n    \n    return true;\n  };\n\n  // Function to add cheat points - memoized to prevent unnecessary re-renders\n  const addCheatPoints = useCallback((points) => {\n    if (!isNaN(points) && points > 0) {\n      setGameState(prevState => ({\n        ...prevState,\n        resources: {\n          ...prevState.resources,\n          ecoPoints: prevState.resources.ecoPoints + points,\n        },\n        stats: {\n          ...prevState.stats,\n          totalEcoPoints: prevState.stats.totalEcoPoints + points,\n        },\n      }));\n    }\n  }, []);\n\n  // Dismiss a specific notification by ID\n  const dismissNotification = useCallback((notificationId) => {\n    setGameState(prevState => ({\n      ...prevState,\n      notifications: prevState.notifications.filter(n => n.id !== notificationId)\n    }));\n  }, []);\n\n  // Reset the game\n  const resetGame = () => {\n    if (window.confirm('Are you sure you want to reset your progress? This cannot be undone.')) {\n      // Clear any pending save interval\n      hasPendingChanges.current = false;\n      \n      // Create a proper initial state with buildings included\n      const fullInitialState = {\n        ...initialState,\n        buildings: mergeFullBuildingData(initialState.buildingsState),\n        lastSaved: new Date().toISOString()\n      };\n      \n      // Reset to initial state with proper building data\n      setGameState(fullInitialState);\n      \n      // Create a state for saving that omits the full building data\n      const stateToSave = {\n        ...initialState,\n        lastSaved: new Date().toISOString()\n      };\n      \n      // Save the default state to localStorage\n      localStorage.setItem('ecoClickerSave', JSON.stringify(stateToSave));\n      \n      // Reset the previous state reference to match the new initial state\n      prevStateRef.current = JSON.stringify({\n        ...fullInitialState,\n        lastSaved: null,\n        lastAutoSave: null\n      });\n      \n      // Reset the auto-save timer\n      lastAutoSaveTime.current = new Date();\n      \n      console.log('Game reset completed: Default values saved');\n      \n      // Reload the window for a completely fresh state\n      window.location.reload();\n    }\n  };\n\n  return {\n    gameState,\n    handleClick,\n    purchaseBuilding,\n    prestigeBuilding,\n    resetGame,\n    dismissNotification,\n    pointsPerSecond: calculatePointsPerSecond(gameState.buildings, gameState.multipliers),\n    clickValue: calculateClickValue(gameState.buildings, gameState.multipliers),\n    getBuildingCost: (buildingId) => {\n      const building = gameState.buildings.find(b => b.id === buildingId);\n      if (!building) return null;\n      return calculateBuildingCost(building.baseCost, building.level, building.prestigeLevel);\n    },\n    checkCanPrestige: (buildingId) => {\n      const building = gameState.buildings.find(b => b.id === buildingId);\n      if (!building) return false;\n      return building.level >= building.maxLevel;\n    },\n    getPrestigeBonus: (buildingId) => {\n      // Return the hardcoded prestige bonus value instead of reading from building object\n      return PRESTIGE_BONUS;\n    },\n    addCheatPoints,\n  };\n};\n\nexport default useGameState;","import { useState, useEffect, useRef, useCallback } from 'react';\n\n// Import audio files as URLs\nimport backgroundMusic from '../../assets/ambient_music.mp3';\nimport buySound from '../../assets/buy.mp3';\nimport prestigeSound from '../../assets/prestige.mp3';\nimport achievementSound from '../../assets/achievement.mp3';\nimport notificationSound from '../../assets/notification.mp3';\n\n// Define audio files map with imported URLs\nconst AUDIO_FILES = {\n  background: backgroundMusic,\n  buy: buySound,\n  prestige: prestigeSound,\n  achievement: achievementSound,\n  notification: notificationSound\n};\n\nconst useAudio = () => {\n  // Audio elements refs\n  const bgMusicRef = useRef(null);\n  const buySoundRef = useRef(null);\n  const prestigeSoundRef = useRef(null);\n  const achievementSoundRef = useRef(null);\n  const notificationSoundRef = useRef(null);\n  \n  // State for audio settings\n  const [audioSettings, setAudioSettings] = useState(() => {\n    const savedSettings = localStorage.getItem('ecoClickerAudioSettings');\n    if (savedSettings) {\n      try {\n        return JSON.parse(savedSettings);\n      } catch (error) {\n        console.error('Failed to parse audio settings:', error);\n      }\n    }\n    return {\n      masterVolume: 0.7,\n      musicVolume: 0.5,\n      sfxVolume: 0.8,\n      musicEnabled: true,\n      sfxEnabled: true,\n    };\n  });\n\n  // Initialize audio elements\n  useEffect(() => {\n    // Create audio elements with proper imports\n    bgMusicRef.current = new Audio(AUDIO_FILES.background);\n    bgMusicRef.current.loop = true;\n    bgMusicRef.current.volume = audioSettings.musicEnabled ? (audioSettings.masterVolume * audioSettings.musicVolume) : 0;\n    \n    buySoundRef.current = new Audio(AUDIO_FILES.buy);\n    buySoundRef.current.volume = audioSettings.sfxEnabled ? (audioSettings.masterVolume * audioSettings.sfxVolume) : 0;\n    \n    prestigeSoundRef.current = new Audio(AUDIO_FILES.prestige);\n    prestigeSoundRef.current.volume = audioSettings.sfxEnabled ? (audioSettings.masterVolume * audioSettings.sfxVolume) : 0;\n    \n    achievementSoundRef.current = new Audio(AUDIO_FILES.achievement);\n    achievementSoundRef.current.volume = audioSettings.sfxEnabled ? (audioSettings.masterVolume * audioSettings.sfxVolume) : 0;\n    \n    notificationSoundRef.current = new Audio(AUDIO_FILES.notification);\n    notificationSoundRef.current.volume = audioSettings.sfxEnabled ? (audioSettings.masterVolume * audioSettings.sfxVolume) : 0;\n    \n    // Start playing background music if enabled\n    if (audioSettings.musicEnabled) {\n      bgMusicRef.current.play().catch(error => {\n        console.warn('Autoplay prevented. User interaction needed to start audio:', error);\n      });\n    }\n    \n    // Cleanup\n    return () => {\n      if (bgMusicRef.current) bgMusicRef.current.pause();\n    };\n  }, []);\n\n  // Update volumes when settings change\n  useEffect(() => {\n    if (bgMusicRef.current) {\n      bgMusicRef.current.volume = audioSettings.musicEnabled ? \n        (audioSettings.masterVolume * audioSettings.musicVolume) : 0;\n    }\n    \n    if (buySoundRef.current) {\n      buySoundRef.current.volume = audioSettings.sfxEnabled ? \n        (audioSettings.masterVolume * audioSettings.sfxVolume) : 0;\n    }\n    \n    if (prestigeSoundRef.current) {\n      prestigeSoundRef.current.volume = audioSettings.sfxEnabled ? \n        (audioSettings.masterVolume * audioSettings.sfxVolume) : 0;\n    }\n    \n    if (achievementSoundRef.current) {\n      achievementSoundRef.current.volume = audioSettings.sfxEnabled ? \n        (audioSettings.masterVolume * audioSettings.sfxVolume) : 0;\n    }\n    \n    if (notificationSoundRef.current) {\n      notificationSoundRef.current.volume = audioSettings.sfxEnabled ? \n        (audioSettings.masterVolume * audioSettings.sfxVolume) : 0;\n    }\n    \n    // Save settings to localStorage\n    localStorage.setItem('ecoClickerAudioSettings', JSON.stringify(audioSettings));\n  }, [audioSettings]);\n\n  // Function to play a sound\n  const playSound = useCallback((soundType) => {\n    if (!audioSettings.sfxEnabled) return;\n    \n    switch (soundType) {\n      case 'buy':\n        if (buySoundRef.current) {\n          buySoundRef.current.currentTime = 0;\n          buySoundRef.current.play().catch(e => console.warn('Error playing sound:', e));\n        }\n        break;\n      case 'prestige':\n        if (prestigeSoundRef.current) {\n          prestigeSoundRef.current.currentTime = 0;\n          prestigeSoundRef.current.play().catch(e => console.warn('Error playing sound:', e));\n        }\n        break;\n      case 'achievement':\n        if (achievementSoundRef.current) {\n          achievementSoundRef.current.currentTime = 0;\n          achievementSoundRef.current.play().catch(e => console.warn('Error playing sound:', e));\n        }\n        break;\n      case 'notification':\n        if (notificationSoundRef.current) {\n          notificationSoundRef.current.currentTime = 0;\n          notificationSoundRef.current.play().catch(e => console.warn('Error playing sound:', e));\n        }\n        break;\n      default:\n        break;\n    }\n  }, [audioSettings.sfxEnabled]);\n\n  // Toggle background music\n  const toggleMusic = useCallback(() => {\n    setAudioSettings(prev => {\n      const newSettings = { ...prev, musicEnabled: !prev.musicEnabled };\n      \n      if (bgMusicRef.current) {\n        if (newSettings.musicEnabled) {\n          bgMusicRef.current.play().catch(e => console.warn('Error playing music:', e));\n        } else {\n          bgMusicRef.current.pause();\n        }\n      }\n      \n      return newSettings;\n    });\n  }, []);\n\n  // Toggle sound effects\n  const toggleSFX = useCallback(() => {\n    setAudioSettings(prev => ({ ...prev, sfxEnabled: !prev.sfxEnabled }));\n  }, []);\n\n  // Update music volume\n  const updateMusicVolume = useCallback((value) => {\n    setAudioSettings(prev => ({ ...prev, musicVolume: value }));\n  }, []);\n\n  // Update SFX volume\n  const updateSFXVolume = useCallback((value) => {\n    setAudioSettings(prev => ({ ...prev, sfxVolume: value }));\n  }, []);\n\n  // Update master volume\n  const updateMasterVolume = useCallback((value) => {\n    setAudioSettings(prev => ({ ...prev, masterVolume: value }));\n  }, []);\n\n  return {\n    audioSettings,\n    playSound,\n    toggleMusic,\n    toggleSFX,\n    updateMusicVolume,\n    updateSFXVolume,\n    updateMasterVolume,\n  };\n};\n\nexport default useAudio;","import React, { useState, useEffect, useCallback, memo, useMemo, useRef } from 'react';\nimport { \n  StyleSheet, \n  View, \n  Text, \n  SafeAreaView, \n  ScrollView, \n  StatusBar,\n  TouchableOpacity,\n  Modal,\n  Animated,\n  FlatList,\n  TextInput,\n  Switch\n} from 'react-native';\n\n// Import components\nimport ClickArea from './components/ClickArea';\nimport Buildings from './components/Buildings';\nimport Stats from './components/Stats';\n\n// Import game state hook\nimport useGameState from './hooks/useGameState';\n// Import audio hook\nimport useAudio from './hooks/useAudio';\n\n// Import carbon tips for the tip system\nimport carbonTips from './data/carbonTips.json';\n\n// Create a simple slider component since Slider is not available in React Native Web\nconst CustomSlider = ({ value, minimumValue, maximumValue, onValueChange, disabled, minimumTrackTintColor, maximumTrackTintColor, thumbTintColor }) => {\n  return (\n    <input\n      type=\"range\"\n      min={minimumValue || 0}\n      max={maximumValue || 1}\n      step={0.01}\n      value={value}\n      onChange={(e) => onValueChange(parseFloat(e.target.value))}\n      disabled={disabled}\n      style={{ \n        flex: 2,\n        accentColor: minimumTrackTintColor || '#4CAF50',\n        opacity: disabled ? 0.5 : 1\n      }}\n    />\n  );\n};\n\nconst App = () => {\n  const {\n    gameState,\n    handleClick,\n    purchaseBuilding,\n    prestigeBuilding,\n    resetGame,\n    pointsPerSecond,\n    clickValue,\n    getBuildingCost,\n    checkCanPrestige,\n    getPrestigeBonus,\n    addCheatPoints,\n    dismissNotification\n  } = useGameState();\n\n  // Initialize audio system\n  const {\n    audioSettings,\n    playSound,\n    toggleMusic,\n    toggleSFX,\n    updateMusicVolume,\n    updateSFXVolume,\n    updateMasterVolume\n  } = useAudio();\n\n  const [activeTab, setActiveTab] = useState('buildings');\n  const [infoModalVisible, setInfoModalVisible] = useState(false);\n  const [cheatMenuVisible, setCheatMenuVisible] = useState(false);\n  const [settingsModalVisible, setSettingsModalVisible] = useState(false);\n  const [pointsToAdd, setPointsToAdd] = useState('1000');\n  \n  // Memoize functions that will be passed to modals to prevent re-renders\n  const handleCloseInfoModal = useCallback(() => setInfoModalVisible(false), []);\n  const handleCloseCheatMenu = useCallback(() => setCheatMenuVisible(false), []);\n  const handleCloseSettingsModal = useCallback(() => setSettingsModalVisible(false), []);\n  \n  const handleCheatPoints = useCallback(() => {\n    const points = parseInt(pointsToAdd, 10);\n    if (!isNaN(points) && points > 0) {\n      addCheatPoints(points);\n      setCheatMenuVisible(false);\n    }\n  }, [pointsToAdd, addCheatPoints]);\n  \n  // Custom click handler that integrates sound\n  const handleGameClick = useCallback(() => {\n    handleClick();\n    // No sound on click to avoid too frequent sound playing\n  }, [handleClick]);\n\n  // Custom building purchase handler that integrates sound\n  const handleBuildingPurchase = useCallback((buildingId) => {\n    const success = purchaseBuilding(buildingId);\n    if (success) {\n      playSound('buy');\n    }\n    return success;\n  }, [purchaseBuilding, playSound]);\n\n  // Custom building prestige handler that integrates sound\n  const handleBuildingPrestige = useCallback((buildingId) => {\n    const success = prestigeBuilding(buildingId);\n    if (success) {\n      playSound('prestige');\n    }\n    return success;\n  }, [prestigeBuilding, playSound]);\n  \n  // Create a ref to track played notification sounds\n  const playedNotificationsRef = useRef(new Set());\n  \n  // Combined effect to handle all notification sounds in one place\n  useEffect(() => {\n    // Only play sound when a new notification is added (not when one is removed)\n    const notificationCount = gameState.notifications.length;\n    \n    if (notificationCount > 0) {\n      // Get the most recent notification\n      const latestNotification = gameState.notifications[notificationCount - 1];\n      \n      // Use a unique ID to make sure we don't play sounds for the same notification twice\n      const notificationId = latestNotification.id;\n      \n      // Only play if we haven't played this notification before\n      if (!playedNotificationsRef.current.has(notificationId)) {\n        // Play different sounds based on notification type\n        if (latestNotification.type === 'achievement') {\n          playSound('achievement');\n        } else if (latestNotification.type === 'prestige') {\n          playSound('prestige');\n        } else {\n          // For building unlocks and other general notifications\n          playSound('notification');\n        }\n        \n        // Mark this notification as played\n        playedNotificationsRef.current.add(notificationId);\n        \n        // Clean up old notification IDs to prevent memory leaks\n        if (playedNotificationsRef.current.size > 20) {\n          const oldestIds = Array.from(playedNotificationsRef.current).slice(0, 10);\n          oldestIds.forEach(id => playedNotificationsRef.current.delete(id));\n        }\n      }\n    }\n  }, [gameState.notifications.length, playSound]);\n  \n  // Function to handle key press for cheat code\n  useEffect(() => {\n    const handleKeyDown = (event) => {\n      // Check if the pressed key is '²' (keyCode 178)\n      if (event.key === '²') {\n        setCheatMenuVisible(true);\n      }\n    };\n    \n    window.addEventListener('keydown', handleKeyDown);\n    \n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, []);\n\n  // Function to format large numbers with K, M, B suffixes\n  const formatNumber = useCallback((num) => {\n    if (num < 1000) return Math.floor(num).toString();\n    if (num < 1000000) return (Math.floor(num / 100) / 10).toFixed(1) + 'K';\n    if (num < 1000000000) return (Math.floor(num / 100000) / 10).toFixed(1) + 'M';\n    return (Math.floor(num / 100000000) / 10).toFixed(1) + 'B';\n  }, []);\n\n  // Notification component\n  const NotificationSystem = useCallback(() => {\n    if (gameState.notifications.length === 0) return null;\n    \n    return (\n      <View style={styles.notificationsContainer}>\n        {gameState.notifications.map((item) => {\n          let bgColor = '#4CAF50'; // default green\n          let iconColor = '#E8F5E9';\n          \n          // Different styles for different notification types\n          if (item.type === 'achievement') {\n            bgColor = '#FFC107'; // amber\n            iconColor = '#FFF9C4';\n          } else if (item.type === 'prestige') {\n            bgColor = '#FF9800'; // orange\n            iconColor = '#FFF3E0';\n          }\n          \n          return (\n            <div \n              key={item.id}\n              onClick={() => dismissNotification(item.id)}\n              style={{\n                cursor: 'pointer',\n                marginBottom: 10\n              }}\n            >\n              <View style={[styles.notification, { backgroundColor: bgColor }]}>\n                <View style={[styles.notificationIconContainer, { backgroundColor: iconColor }]}>\n                  <Text style={styles.notificationIcon}>{item.icon}</Text>\n                </View>\n                <View style={styles.notificationContent}>\n                  <Text style={styles.notificationTitle}>{item.title}</Text>\n                  <Text style={styles.notificationMessage}>{item.message}</Text>\n                  {item.condition && (\n                    <Text style={styles.notificationCondition}>\n                      Condition: {item.condition}\n                    </Text>\n                  )}\n                </View>\n              </View>\n            </div>\n          );\n        })}\n      </View>\n    );\n  }, [gameState.notifications, dismissNotification]);\n\n  const renderTabContent = useCallback(() => {\n    switch (activeTab) {\n      case 'buildings':\n        return (\n          <Buildings\n            buildings={gameState.buildings}\n            ecoPoints={gameState.resources.ecoPoints}\n            onPurchase={handleBuildingPurchase}\n            prestigeBuilding={handleBuildingPrestige}\n            checkCanPrestige={checkCanPrestige}\n            getPrestigeBonus={getPrestigeBonus}\n            getBuildingCost={getBuildingCost}\n          />\n        );\n      case 'stats':\n        return (\n          <Stats\n            gameState={gameState}\n          />\n        );\n      default:\n        return <Buildings />;\n    }\n  }, [activeTab, gameState.buildings, gameState.resources.ecoPoints, gameState.stats, \n      gameState.resources, pointsPerSecond, gameState.achievements, handleBuildingPurchase, \n      handleBuildingPrestige, checkCanPrestige, getPrestigeBonus, getBuildingCost]);\n\n  // Completely memoize the modal components to prevent re-renders\n  const InfoModal = useMemo(() => (\n    <Modal\n      animationType=\"none\"\n      transparent={true}\n      visible={infoModalVisible}\n      onRequestClose={handleCloseInfoModal}\n    >\n      <View style={styles.modalOverlay}>\n        <View style={styles.modalContent}>\n          <Text style={styles.modalTitle}>About EcoClicker</Text>\n          \n          <ScrollView style={styles.modalScrollView}>\n            <Text style={styles.sectionTitle}>How to Play</Text>\n            <Text style={styles.modalText}>\n              Click the Earth to generate eco points. Use your points to purchase buildings that \n              will help you generate more points automatically or increase your click value.\n            </Text>\n            \n            <Text style={styles.sectionTitle}>Ecological Impact</Text>\n            <Text style={styles.modalText}>\n              While EcoClicker is just a game, it aims to raise awareness about ecological issues. \n              Each building represents real-world actions we can take to help our planet.\n            </Text>\n            \n            <Text style={styles.sectionTitle}>Eco Facts</Text>\n            <View style={styles.factContainer}>\n              <Text style={styles.factTitle}>🌳 Trees</Text>\n              <Text style={styles.factText}>\n                A single mature tree can absorb up to 48 pounds of carbon dioxide per year.\n              </Text>\n            </View>\n            \n            <View style={styles.factContainer}>\n              <Text style={styles.factTitle}>☀️ Solar Energy</Text>\n              <Text style={styles.factText}>\n                The sunlight that hits the Earth's surface in just one hour could power the entire world for a year.\n              </Text>\n            </View>\n            \n            <View style={styles.factContainer}>\n              <Text style={styles.factTitle}>♻️ Recycling</Text>\n              <Text style={styles.factText}>\n                Recycling one aluminum can saves enough energy to run a TV for three hours.\n              </Text>\n            </View>\n            \n            <View style={styles.factContainer}>\n              <Text style={styles.factTitle}>🌬️ Wind Energy</Text>\n              <Text style={styles.factText}>\n                Wind turbines can reduce carbon dioxide emissions by 2,000 tons per year compared to fossil fuels.\n              </Text>\n            </View>\n          </ScrollView>\n          \n          <TouchableOpacity\n            style={styles.closeButton}\n            onPress={handleCloseInfoModal}\n          >\n            <Text style={styles.closeButtonText}>Close</Text>\n          </TouchableOpacity>\n        </View>\n      </View>\n    </Modal>\n  ), [infoModalVisible, handleCloseInfoModal]);\n\n  // Memoize the cheat menu\n  const CheatMenu = useMemo(() => (\n    <Modal\n      animationType=\"none\"\n      transparent={true}\n      visible={cheatMenuVisible}\n      onRequestClose={handleCloseCheatMenu}\n    >\n      <View style={styles.modalOverlay}>\n        <View style={styles.modalContent}>\n          <Text style={styles.modalTitle}>Cheat Menu</Text>\n          \n          <View style={styles.cheatOption}>\n            <Text style={styles.cheatLabel}>Add EcoPoints:</Text>\n            <TextInput\n              style={styles.cheatInput}\n              value={pointsToAdd}\n              onChangeText={setPointsToAdd}\n              keyboardType=\"numeric\"\n            />\n          </View>\n          \n          <View style={styles.cheatButtonsRow}>\n            <TouchableOpacity\n              style={styles.cheatButton}\n              onPress={handleCheatPoints}\n            >\n              <Text style={styles.cheatButtonText}>Add Points</Text>\n            </TouchableOpacity>\n            \n            <TouchableOpacity\n              style={[styles.cheatButton, styles.cancelButton]}\n              onPress={handleCloseCheatMenu}\n            >\n              <Text style={styles.cheatButtonText}>Close</Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n      </View>\n    </Modal>\n  ), [cheatMenuVisible, handleCloseCheatMenu, pointsToAdd, handleCheatPoints]);\n\n  // Settings modal for audio controls\n  const SettingsModal = useMemo(() => (\n    <Modal\n      animationType=\"none\"\n      transparent={true}\n      visible={settingsModalVisible}\n      onRequestClose={handleCloseSettingsModal}\n    >\n      <View style={styles.modalOverlay}>\n        <View style={styles.modalContent}>\n          <Text style={styles.modalTitle}>Settings</Text>\n          \n          <View style={styles.settingsSection}>\n            <Text style={styles.sectionTitle}>Audio</Text>\n            \n            <View style={styles.settingRow}>\n              <Text style={styles.settingLabel}>Master Volume</Text>\n              <CustomSlider\n                value={audioSettings.masterVolume}\n                minimumValue={0}\n                maximumValue={1}\n                onValueChange={updateMasterVolume}\n                minimumTrackTintColor=\"#4CAF50\"\n                maximumTrackTintColor=\"#D8D8D8\"\n                thumbTintColor=\"#2E7D32\"\n              />\n              <Text style={styles.volumeValue}>{Math.round(audioSettings.masterVolume * 100)}%</Text>\n            </View>\n            \n            <View style={styles.settingRow}>\n              <Text style={styles.settingLabel}>Music Volume</Text>\n              <CustomSlider\n                value={audioSettings.musicVolume}\n                minimumValue={0}\n                maximumValue={1}\n                onValueChange={updateMusicVolume}\n                minimumTrackTintColor=\"#4CAF50\"\n                maximumTrackTintColor=\"#D8D8D8\"\n                thumbTintColor=\"#2E7D32\"\n                disabled={!audioSettings.musicEnabled}\n              />\n              <Text style={styles.volumeValue}>{Math.round(audioSettings.musicVolume * 100)}%</Text>\n            </View>\n            \n            <View style={styles.settingRow}>\n              <Text style={styles.settingLabel}>Sound Effects Volume</Text>\n              <CustomSlider\n                value={audioSettings.sfxVolume}\n                minimumValue={0}\n                maximumValue={1}\n                onValueChange={updateSFXVolume}\n                minimumTrackTintColor=\"#4CAF50\"\n                maximumTrackTintColor=\"#D8D8D8\"\n                thumbTintColor=\"#2E7D32\"\n                disabled={!audioSettings.sfxEnabled}\n              />\n              <Text style={styles.volumeValue}>{Math.round(audioSettings.sfxVolume * 100)}%</Text>\n            </View>\n            \n            <View style={styles.settingRow}>\n              <Text style={styles.settingLabel}>Enable Music</Text>\n              <Switch\n                trackColor={{ false: \"#D8D8D8\", true: \"#81C784\" }}\n                thumbColor={audioSettings.musicEnabled ? \"#4CAF50\" : \"#f4f3f4\"}\n                ios_backgroundColor=\"#D8D8D8\"\n                onValueChange={toggleMusic}\n                value={audioSettings.musicEnabled}\n              />\n            </View>\n            \n            <View style={styles.settingRow}>\n              <Text style={styles.settingLabel}>Enable Sound Effects</Text>\n              <Switch\n                trackColor={{ false: \"#D8D8D8\", true: \"#81C784\" }}\n                thumbColor={audioSettings.sfxEnabled ? \"#4CAF50\" : \"#f4f3f4\"}\n                ios_backgroundColor=\"#D8D8D8\"\n                onValueChange={toggleSFX}\n                value={audioSettings.sfxEnabled}\n              />\n            </View>\n          </View>\n          \n          <TouchableOpacity\n            style={styles.closeButton}\n            onPress={handleCloseSettingsModal}\n          >\n            <Text style={styles.closeButtonText}>Close</Text>\n          </TouchableOpacity>\n        </View>\n      </View>\n    </Modal>\n  ), [\n    settingsModalVisible, \n    handleCloseSettingsModal, \n    audioSettings, \n    updateMasterVolume, \n    updateMusicVolume, \n    updateSFXVolume, \n    toggleMusic, \n    toggleSFX\n  ]);\n\n  return (\n    <SafeAreaView style={styles.safeArea}>\n      <StatusBar barStyle=\"dark-content\" backgroundColor=\"#E8F5E9\" />\n      \n      <View style={styles.header}>\n        <Text style={styles.title}>EcoClicker</Text>\n        <View style={styles.headerButtons}>\n          <TouchableOpacity \n            style={styles.headerButton} \n            onPress={() => setSettingsModalVisible(true)}\n          >\n            <Text style={styles.headerButtonText}>⚙️</Text>\n          </TouchableOpacity>\n          <TouchableOpacity \n            style={styles.headerButton} \n            onPress={() => setInfoModalVisible(true)}\n          >\n            <Text style={styles.headerButtonText}>ℹ️</Text>\n          </TouchableOpacity>\n        </View>\n      </View>\n      \n      <NotificationSystem />\n      \n      <ClickArea \n        onPress={handleGameClick} \n        clickValue={clickValue} \n        ecoPoints={gameState.resources.ecoPoints}\n        pointsPerSecond={pointsPerSecond}\n        formatNumber={formatNumber}\n        buildings={gameState.buildings}\n      />\n\n      <View style={styles.tabBar}>\n        <TouchableOpacity\n          style={[styles.tab, activeTab === 'buildings' && styles.activeTab]}\n          onPress={() => setActiveTab('buildings')}\n        >\n          <Text style={[styles.tabText, activeTab === 'buildings' && styles.activeTabText]}>Buildings</Text>\n        </TouchableOpacity>\n        \n        <TouchableOpacity\n          style={[styles.tab, activeTab === 'stats' && styles.activeTab]}\n          onPress={() => setActiveTab('stats')}\n        >\n          <Text style={[styles.tabText, activeTab === 'stats' && styles.activeTabText]}>Stats</Text>\n        </TouchableOpacity>\n      </View>\n      \n      <View style={styles.contentContainer}>\n        {renderTabContent()}\n      </View>\n      \n      <View style={styles.footer}>\n        <TouchableOpacity style={styles.resetButton} onPress={resetGame}>\n          <Text style={styles.resetButtonText}>Reset Game</Text>\n        </TouchableOpacity>\n      </View>\n      \n      {InfoModal}\n      {CheatMenu}\n      {SettingsModal}\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  safeArea: {\n    flex: 1,\n    backgroundColor: '#F1F8E9',\n  },\n  header: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    padding: 16,\n    backgroundColor: '#4CAF50',\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: 'white',\n  },\n  headerButtons: {\n    flexDirection: 'row',\n  },\n  headerButton: {\n    marginLeft: 10,\n  },\n  headerButtonText: {\n    fontSize: 24,\n  },\n  tabBar: {\n    flexDirection: 'row',\n    borderBottomWidth: 1,\n    borderBottomColor: '#81C784',\n  },\n  tab: {\n    flex: 1,\n    paddingVertical: 10,\n    alignItems: 'center',\n  },\n  activeTab: {\n    borderBottomWidth: 3,\n    borderBottomColor: '#4CAF50',\n  },\n  tabText: {\n    fontSize: 16,\n    color: '#689F38',\n  },\n  activeTabText: {\n    fontWeight: 'bold',\n    color: '#2E7D32',\n  },\n  contentContainer: {\n    flex: 1,\n    padding: 10,\n  },\n  footer: {\n    padding: 10,\n    alignItems: 'center',\n    borderTopWidth: 1,\n    borderTopColor: '#E0E0E0',\n  },\n  resetButton: {\n    padding: 10,\n  },\n  resetButtonText: {\n    color: '#BF360C',\n    fontSize: 14,\n  },\n  modalOverlay: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n    position: 'fixed', // Add fixed position for modals\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    zIndex: 1100, // Higher z-index than notifications\n  },\n  modalContent: {\n    width: '90%',\n    maxHeight: '80%',\n    backgroundColor: 'white',\n    borderRadius: 10,\n    padding: 20,\n    alignItems: 'center',\n    zIndex: 1200, // Even higher z-index\n  },\n  notificationsContainer: {\n    position: 'fixed',\n    top: 70, // Position below the header\n    right: 10, // Changed from left to right\n    zIndex: 1000, // Ensure it's above everything else\n    maxWidth: '80%',\n    maxHeight: 500,\n    // Removed duplicate position: fixed property\n  },\n  notificationsList: {\n    // No horizontal padding needed since we have left margin\n  },\n  notification: {\n    flexDirection: 'row',\n    borderRadius: 8,\n    padding: 10,\n    marginVertical: 5,\n    alignItems: 'center',\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.3,\n    shadowRadius: 3,\n    elevation: 4,\n  },\n  notificationIconContainer: {\n    width: 40,\n    height: 40,\n    borderRadius: 20,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginRight: 10,\n  },\n  notificationIcon: {\n    fontSize: 20,\n  },\n  notificationContent: {\n    flex: 1,\n  },\n  notificationTitle: {\n    fontWeight: 'bold',\n    color: 'white',\n    fontSize: 16,\n  },\n  notificationMessage: {\n    color: 'white',\n    fontSize: 14,\n  },\n  notificationCondition: {\n    color: 'rgba(255, 255, 255, 0.8)',\n    fontSize: 12,\n    fontStyle: 'italic',\n    marginTop: 2,\n  },\n  cheatOption: {\n    marginBottom: 15,\n    width: '100%',\n  },\n  cheatLabel: {\n    fontSize: 16,\n    color: '#333',\n    marginBottom: 5,\n  },\n  cheatInput: {\n    borderWidth: 1,\n    borderColor: '#CCC',\n    borderRadius: 5,\n    padding: 10,\n    fontSize: 16,\n    width: '100%',\n  },\n  cheatButtonsRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    width: '100%',\n  },\n  cheatButton: {\n    backgroundColor: '#4CAF50',\n    paddingHorizontal: 20,\n    paddingVertical: 10,\n    borderRadius: 5,\n    marginHorizontal: 5,\n  },\n  cheatButtonText: {\n    color: 'white',\n    fontSize: 16,\n    fontWeight: 'bold',\n  },\n  cancelButton: {\n    backgroundColor: '#F44336',\n  },\n  modalTitle: {\n    fontSize: 22,\n    fontWeight: 'bold',\n    color: '#2E7D32',\n    marginBottom: 15,\n    textAlign: 'center',\n  },\n  modalScrollView: {\n    width: '100%',\n    maxHeight: 400,\n    marginBottom: 15,\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: '#388E3C',\n    marginTop: 15,\n    marginBottom: 8,\n  },\n  modalText: {\n    fontSize: 16,\n    color: '#333',\n    marginBottom: 10,\n    lineHeight: 22,\n  },\n  factContainer: {\n    backgroundColor: '#E8F5E9',\n    borderRadius: 8,\n    padding: 12,\n    marginVertical: 8,\n    width: '100%',\n  },\n  factTitle: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    color: '#2E7D32',\n    marginBottom: 5,\n  },\n  factText: {\n    fontSize: 14,\n    color: '#333',\n    lineHeight: 20,\n  },\n  closeButton: {\n    backgroundColor: '#4CAF50',\n    paddingHorizontal: 20,\n    paddingVertical: 10,\n    borderRadius: 5,\n    marginTop: 10,\n  },\n  closeButtonText: {\n    color: 'white',\n    fontSize: 16,\n    fontWeight: 'bold',\n  },\n  settingsSection: {\n    width: '100%',\n  },\n  settingRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 15,\n  },\n  settingLabel: {\n    flex: 1,\n    fontSize: 16,\n    color: '#333',\n  },\n  slider: {\n    flex: 2,\n  },\n  volumeValue: {\n    flex: 1,\n    textAlign: 'right',\n    fontSize: 16,\n    color: '#333',\n  },\n});\n\nexport default App;","import { registerRootComponent } from 'expo';\nimport App from './src/App';\n\n// Register the main component\nregisterRootComponent(App);\n\nexport default App;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"./\";","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t792: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkweb\"] = self[\"webpackChunkweb\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [214], () => (__webpack_require__(8879)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["styles","isWeb","webScale","StyleSheet","create","backgroundImage","width","alignItems","justifyContent","height","overflow","webBackgroundImage","marginHorizontal","backgroundImageStyle","opacity","resizeMode","position","top","container","padding","paddingTop","minHeight","backgroundColor","borderRadius","marginVertical","marginTop","webContainer","maxWidth","bannerContainer","marginBottom","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","webBannerContainer","bannerTitle","fontSize","fontWeight","color","webBannerTitle","bannerText","textAlign","webBannerText","pointsDisplay","paddingVertical","paddingHorizontal","borderWidth","borderColor","webPointsDisplay","pointsValue","textShadowColor","textShadowOffset","textShadowRadius","webPointsValue","pointsLabel","webPointsLabel","clickButton","webClickButton","innerCircle","webInnerCircle","buttonText","webButtonText","buttonSubtext","webButtonSubtext","floatingText","zIndex","pointsPerSecondContainer","webPointsPerSecondContainer","pointsPerSecondValue","webPointsPerSecondValue","pointsPerSecondLabel","webPointsPerSecondLabel","valueText","webValueText","_ref","onPress","clickValue","ecoPoints","pointsPerSecond","formatNumber","buildings","_Dimensions$get","Dimensions","get","currentStyles","_useState","useState","_useState2","_slicedToArray","currentTipIndex","setCurrentTipIndex","_useState3","_useState4","shouldShowEcoTips","setShouldShowEcoTips","useEffect","ecoEducation","find","building","id","level","prestigeLevel","tipInterval","setInterval","prevIndex","carbonTips","length","clearInterval","_useState5","_useState6","animations","setAnimations","_useState7","_useState8","nextId","setNextId","_jsx","ImageBackground","source","require","style","imageStyle","children","_jsxs","View","TouchableOpacity","Text","tip","map","anim","Animated","transform","translateX","x","translateY","value","newAnim","Math","random","y","Value","Number","toFixed","concat","_toConsumableArray","parallel","timing","toValue","duration","useNativeDriver","start","filter","a","activeOpacity","buildingEcoFactMap","solar_panel","tree_plantation","eco_education","poop_recycling","hydro_power","community_garden","eco_research_lab","geothermal_plant","plastic_ocean_cleaner","carbon_capture","flex","title","buildingsList","buildingItem","flexDirection","affordableBuilding","unaffordableBuilding","maxedBuilding","buildingIcon","marginRight","iconText","buildingInfo","buildingHeader","buildingName","buildingLevel","buildingDescription","ecoFactText","fontStyle","borderLeftWidth","borderLeftColor","prestigeBonus","buildingFooter","costText","affordableText","unaffordableText","maxedText","effectText","emptyContainer","emptyText","prestigeContainer","prestigeText","prestigeButton","alignSelf","prestigeButtonText","onPurchase","prestigeBuilding","checkCanPrestige","getPrestigeBonus","getBuildingCost","availableBuildings","Array","isArray","unlocked","buildingEcoFacts","useMemo","facts","forEach","buildingId","factIds","randomFactId","floor","getRandomEcoFact","b","join","ScrollView","cost","canAfford","maxLevel","canPrestige","currentPrestigeBonus","ecoFact","event","CustomEvent","detail","document","dispatchEvent","trackBuildingInteraction","disabled","icon","name","description","type","baseEffect","clickEffect","dashboardContainer","dashboardCard","dashboardHeader","dashboardTitle","statsGridContainer","flexWrap","statsGridItem","statIcon","statTitle","statValue","sectionContainer","sectionTitleContainer","sectionTitleIcon","sectionTitle","statsCard","statsRow","statsLabel","statsValue","progressBarContainer","progressBar","progressPercentage","right","achievementsScrollView","maxHeight","achievementsContainer","achievementItem","lockedAchievement","achievementIcon","achievementInfo","achievementName","achievementDescription","lockedAchievementName","lockedAchievementDescription","gameState","stats","unlockedAchievements","resources","unlockedAchievementObjects","achievementsData","achievement","includes","lockedAchievementObjects","achievementPercentage","round","num","undefined","toLocaleString","totalEcoPoints","totalClicks","treesPlanted","co2Reduced","totalPrestiges","PRESTIGE_BONUS","deepMerge","defaultObj","savedObj","result","_objectSpread","Object","keys","key","defaultItem","savedItem","item","defaultIds","newItems","initialState","carbonOffset","renewableEnergy","buildingInteractions","multipliers","clickMultiplier","passiveMultiplier","buildingsState","buildingsData","notifications","settings","soundEnabled","particlesEnabled","lastSaved","lastAutoSave","calculateBuildingCost","baseCost","prestigedBaseCost","pow","calculatePointsPerSecond","reduce","sum","calculateClickValue","mergeFullBuildingData","buildingData","buildingState","checkAchievementCondition","conditionType","conditionValue","totalBuildings","conditionBuilding","shouldReset","setShouldReset","hasPendingChanges","useRef","lastAutoSaveTime","Date","prevStateRef","savedState","localStorage","getItem","parsedState","JSON","parse","mergedState","fullState","current","stringify","error","console","removeItem","setGameState","hasStateChanged","useCallback","currentState","stateForComparison","currentStateStr","hasChanged","saveGame","fullInitialState","toISOString","stateToSave","setItem","log","window","location","reload","now","prevState","newState","saveInterval","getTime","timer","treePlantation","co2ToReduce","updatedBuildings","_updatedBuildings$tre","treeIndex","findIndex","setTimeout","slice","clearTimeout","handleBuildingInteraction","_defineProperty","addEventListener","removeEventListener","hasChanges","newNotifications","unlockAt","unshift","message","condition","conditionText","addCheatPoints","points","isNaN","dismissNotification","notificationId","n","handleClick","purchaseBuilding","buildingIndex","newBuildings","newMultipliers","effectValue","oldEffect","resetGame","confirm","AUDIO_FILES","background","buy","prestige","notification","bgMusicRef","buySoundRef","prestigeSoundRef","achievementSoundRef","notificationSoundRef","savedSettings","masterVolume","musicVolume","sfxVolume","musicEnabled","sfxEnabled","audioSettings","setAudioSettings","Audio","loop","volume","play","catch","warn","pause","playSound","soundType","currentTime","e","toggleMusic","prev","newSettings","toggleSFX","updateMusicVolume","updateSFXVolume","updateMasterVolume","CustomSlider","minimumValue","maximumValue","onValueChange","minimumTrackTintColor","maximumTrackTintColor","thumbTintColor","min","max","step","onChange","parseFloat","target","accentColor","safeArea","header","headerButtons","headerButton","marginLeft","headerButtonText","tabBar","borderBottomWidth","borderBottomColor","tab","activeTab","tabText","activeTabText","contentContainer","footer","borderTopWidth","borderTopColor","resetButton","resetButtonText","modalOverlay","left","bottom","modalContent","notificationsContainer","notificationsList","notificationIconContainer","notificationIcon","notificationContent","notificationTitle","notificationMessage","notificationCondition","cheatOption","cheatLabel","cheatInput","cheatButtonsRow","cheatButton","cheatButtonText","cancelButton","modalTitle","modalScrollView","modalText","lineHeight","factContainer","factTitle","factText","closeButton","closeButtonText","settingsSection","settingRow","settingLabel","slider","volumeValue","_useGameState","useGameState","_useAudio","useAudio","setActiveTab","infoModalVisible","setInfoModalVisible","cheatMenuVisible","setCheatMenuVisible","settingsModalVisible","setSettingsModalVisible","_useState9","_useState10","pointsToAdd","setPointsToAdd","handleCloseInfoModal","handleCloseCheatMenu","handleCloseSettingsModal","handleCheatPoints","parseInt","handleGameClick","handleBuildingPurchase","success","handleBuildingPrestige","playedNotificationsRef","Set","notificationCount","latestNotification","has","add","size","from","delete","handleKeyDown","toString","NotificationSystem","bgColor","iconColor","onClick","cursor","renderTabContent","Buildings","Stats","achievements","InfoModal","Modal","animationType","transparent","visible","onRequestClose","CheatMenu","TextInput","onChangeText","keyboardType","SettingsModal","Switch","trackColor","false","true","thumbColor","ios_backgroundColor","SafeAreaView","StatusBar","barStyle","ClickArea","registerRootComponent","App","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","m","deferred","O","chunkIds","fn","priority","notFulfilled","Infinity","i","fulfilled","j","every","splice","r","getter","__esModule","d","definition","o","defineProperty","enumerable","g","globalThis","this","Function","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","p","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","data","moreModules","runtime","some","chunkLoadingGlobal","self","bind","push","__webpack_exports__"],"sourceRoot":""}