{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { useState, useEffect } from 'react';\nvar initialState = {\n  resources: {\n    ecoPoints: 0,\n    carbonOffset: 0,\n    renewableEnergy: 0\n  },\n  stats: {\n    totalClicks: 0,\n    totalEcoPoints: 0,\n    treesPlanted: 0,\n    co2Reduced: 0\n  },\n  multipliers: {\n    clickMultiplier: 1,\n    passiveMultiplier: 1\n  },\n  upgrades: [{\n    id: 'solar_panel',\n    name: 'Solar Panel',\n    description: 'Generate 1 eco point per second',\n    baseCost: 10,\n    level: 0,\n    maxLevel: 50,\n    baseEffect: 1,\n    type: 'passive',\n    resource: 'ecoPoints',\n    unlocked: true,\n    icon: '☀️'\n  }, {\n    id: 'recycling_center',\n    name: 'Recycling Center',\n    description: 'Increase click value by 1',\n    baseCost: 25,\n    level: 0,\n    maxLevel: 30,\n    baseEffect: 1,\n    type: 'click',\n    resource: 'ecoPoints',\n    unlocked: true,\n    icon: '♻️'\n  }, {\n    id: 'tree_plantation',\n    name: 'Tree Plantation',\n    description: 'Plant trees and generate 5 eco points per second',\n    baseCost: 100,\n    level: 0,\n    maxLevel: 20,\n    baseEffect: 5,\n    type: 'passive',\n    resource: 'ecoPoints',\n    unlocked: false,\n    unlockAt: 50,\n    icon: '🌳'\n  }, {\n    id: 'wind_farm',\n    name: 'Wind Farm',\n    description: 'Generate 10 eco points per second',\n    baseCost: 250,\n    level: 0,\n    maxLevel: 15,\n    baseEffect: 10,\n    type: 'passive',\n    resource: 'ecoPoints',\n    unlocked: false,\n    unlockAt: 150,\n    icon: '🌬️'\n  }, {\n    id: 'eco_education',\n    name: 'Eco Education',\n    description: 'Increase all production by 10%',\n    baseCost: 500,\n    level: 0,\n    maxLevel: 10,\n    baseEffect: 0.1,\n    type: 'multiplier',\n    resource: 'ecoPoints',\n    unlocked: false,\n    unlockAt: 300,\n    icon: '📚'\n  }],\n  achievements: [{\n    id: 'first_click',\n    name: 'First Step to Change',\n    description: 'Make your first eco-click',\n    unlocked: false,\n    condition: function condition(state) {\n      return state.stats.totalClicks >= 1;\n    },\n    icon: '👆'\n  }, {\n    id: 'eco_warrior',\n    name: 'Eco Warrior',\n    description: 'Reach 100 eco points',\n    unlocked: false,\n    condition: function condition(state) {\n      return state.stats.totalEcoPoints >= 100;\n    },\n    icon: '🌱'\n  }, {\n    id: 'environmental_hero',\n    name: 'Environmental Hero',\n    description: 'Reach 1000 eco points',\n    unlocked: false,\n    condition: function condition(state) {\n      return state.stats.totalEcoPoints >= 1000;\n    },\n    icon: '🦸'\n  }, {\n    id: 'upgrade_master',\n    name: 'Upgrade Master',\n    description: 'Purchase 10 upgrades',\n    unlocked: false,\n    condition: function condition(state) {\n      var totalUpgrades = state.upgrades.reduce(function (sum, upgrade) {\n        return sum + upgrade.level;\n      }, 0);\n      return totalUpgrades >= 10;\n    },\n    icon: '⬆️'\n  }],\n  settings: {\n    soundEnabled: true,\n    particlesEnabled: true\n  },\n  lastSaved: null\n};\nvar calculateUpgradeCost = function calculateUpgradeCost(baseCost, level) {\n  return Math.floor(baseCost * Math.pow(1.15, level));\n};\nvar calculateTreePlantationPoints = function calculateTreePlantationPoints(upgrades, multipliers) {\n  var treePlantation = upgrades.find(function (u) {\n    return u.id === 'tree_plantation';\n  });\n  if (!treePlantation || treePlantation.level === 0) return 0;\n  return treePlantation.baseEffect * treePlantation.level * multipliers.passiveMultiplier;\n};\nvar calculatePointsPerSecond = function calculatePointsPerSecond(upgrades, multipliers) {\n  return upgrades.filter(function (upgrade) {\n    return upgrade.type === 'passive' && upgrade.level > 0;\n  }).reduce(function (sum, upgrade) {\n    return sum + upgrade.baseEffect * upgrade.level;\n  }, 0) * multipliers.passiveMultiplier;\n};\nvar calculateClickValue = function calculateClickValue(upgrades, multipliers) {\n  var baseClick = 1;\n  var clickBonus = upgrades.filter(function (upgrade) {\n    return upgrade.type === 'click' && upgrade.level > 0;\n  }).reduce(function (sum, upgrade) {\n    return sum + upgrade.baseEffect * upgrade.level;\n  }, 0);\n  return (baseClick + clickBonus) * multipliers.clickMultiplier;\n};\nvar useGameState = function useGameState() {\n  var _useState = useState(function () {\n      var savedState = localStorage.getItem('ecoClickerSave');\n      if (savedState) {\n        try {\n          return JSON.parse(savedState);\n        } catch (error) {\n          console.error('Failed to parse saved game state:', error);\n          return initialState;\n        }\n      }\n      return initialState;\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    gameState = _useState2[0],\n    setGameState = _useState2[1];\n  useEffect(function () {\n    var saveGame = function saveGame() {\n      var stateToSave = _objectSpread(_objectSpread({}, gameState), {}, {\n        lastSaved: new Date().toISOString()\n      });\n      localStorage.setItem('ecoClickerSave', JSON.stringify(stateToSave));\n    };\n    var saveInterval = setInterval(saveGame, 30000);\n    return function () {\n      clearInterval(saveInterval);\n      saveGame();\n    };\n  }, [gameState]);\n  useEffect(function () {\n    var pointsPerSecond = calculatePointsPerSecond(gameState.upgrades, gameState.multipliers);\n    if (pointsPerSecond > 0) {\n      var timer = setInterval(function () {\n        setGameState(function (prevState) {\n          var treePlantation = prevState.upgrades.find(function (u) {\n            return u.id === 'tree_plantation';\n          });\n          var treesToPlant = treePlantation && treePlantation.level > 0 ? treePlantation.level * 0.1 : 0;\n          var co2ToReduce = pointsPerSecond * 0.05;\n          return _objectSpread(_objectSpread({}, prevState), {}, {\n            resources: _objectSpread(_objectSpread({}, prevState.resources), {}, {\n              ecoPoints: prevState.resources.ecoPoints + pointsPerSecond\n            }),\n            stats: _objectSpread(_objectSpread({}, prevState.stats), {}, {\n              totalEcoPoints: prevState.stats.totalEcoPoints + pointsPerSecond,\n              treesPlanted: prevState.stats.treesPlanted + treesToPlant,\n              co2Reduced: prevState.stats.co2Reduced + co2ToReduce\n            })\n          });\n        });\n      }, 1000);\n      return function () {\n        return clearInterval(timer);\n      };\n    }\n  }, [gameState.upgrades, gameState.multipliers]);\n  useEffect(function () {\n    var hasChanges = false;\n    var newState = _objectSpread({}, gameState);\n    newState.upgrades = gameState.upgrades.map(function (upgrade) {\n      if (!upgrade.unlocked && upgrade.unlockAt && gameState.resources.ecoPoints >= upgrade.unlockAt) {\n        hasChanges = true;\n        return _objectSpread(_objectSpread({}, upgrade), {}, {\n          unlocked: true\n        });\n      }\n      return upgrade;\n    });\n    newState.achievements = gameState.achievements.map(function (achievement) {\n      if (!achievement.unlocked && achievement.condition(gameState)) {\n        hasChanges = true;\n        return _objectSpread(_objectSpread({}, achievement), {}, {\n          unlocked: true\n        });\n      }\n      return achievement;\n    });\n    if (hasChanges) {\n      setGameState(newState);\n    }\n  }, [gameState]);\n  var handleClick = function handleClick() {\n    var clickValue = calculateClickValue(gameState.upgrades, gameState.multipliers);\n    var co2ToReduce = clickValue * 0.05;\n    setGameState(function (prevState) {\n      return _objectSpread(_objectSpread({}, prevState), {}, {\n        resources: _objectSpread(_objectSpread({}, prevState.resources), {}, {\n          ecoPoints: prevState.resources.ecoPoints + clickValue\n        }),\n        stats: _objectSpread(_objectSpread({}, prevState.stats), {}, {\n          totalClicks: prevState.stats.totalClicks + 1,\n          totalEcoPoints: prevState.stats.totalEcoPoints + clickValue,\n          co2Reduced: prevState.stats.co2Reduced + co2ToReduce\n        })\n      });\n    });\n  };\n  var purchaseUpgrade = function purchaseUpgrade(upgradeId) {\n    var upgradeIndex = gameState.upgrades.findIndex(function (u) {\n      return u.id === upgradeId;\n    });\n    if (upgradeIndex === -1) return false;\n    var upgrade = gameState.upgrades[upgradeIndex];\n    if (upgrade.level >= upgrade.maxLevel) return false;\n    var cost = calculateUpgradeCost(upgrade.baseCost, upgrade.level);\n    if (gameState.resources.ecoPoints < cost) return false;\n    var newUpgrades = _toConsumableArray(gameState.upgrades);\n    newUpgrades[upgradeIndex] = _objectSpread(_objectSpread({}, upgrade), {}, {\n      level: upgrade.level + 1\n    });\n    var newMultipliers = _objectSpread({}, gameState.multipliers);\n    if (upgrade.type === 'multiplier') {\n      newMultipliers = {\n        clickMultiplier: gameState.multipliers.clickMultiplier + upgrade.baseEffect,\n        passiveMultiplier: gameState.multipliers.passiveMultiplier + upgrade.baseEffect\n      };\n    }\n    setGameState(function (prevState) {\n      return _objectSpread(_objectSpread({}, prevState), {}, {\n        resources: _objectSpread(_objectSpread({}, prevState.resources), {}, {\n          ecoPoints: prevState.resources.ecoPoints - cost\n        }),\n        upgrades: newUpgrades,\n        multipliers: newMultipliers\n      });\n    });\n    return true;\n  };\n  var resetGame = function resetGame() {\n    if (window.confirm('Are you sure you want to reset your progress? This cannot be undone.')) {\n      localStorage.removeItem('ecoClickerSave');\n      setGameState(initialState);\n    }\n  };\n  return {\n    gameState: gameState,\n    handleClick: handleClick,\n    purchaseUpgrade: purchaseUpgrade,\n    resetGame: resetGame,\n    pointsPerSecond: calculatePointsPerSecond(gameState.upgrades, gameState.multipliers),\n    clickValue: calculateClickValue(gameState.upgrades, gameState.multipliers),\n    getUpgradeCost: function getUpgradeCost(upgradeId) {\n      var upgrade = gameState.upgrades.find(function (u) {\n        return u.id === upgradeId;\n      });\n      if (!upgrade) return null;\n      return calculateUpgradeCost(upgrade.baseCost, upgrade.level);\n    }\n  };\n};\nexport default useGameState;","map":{"version":3,"names":["useState","useEffect","initialState","resources","ecoPoints","carbonOffset","renewableEnergy","stats","totalClicks","totalEcoPoints","treesPlanted","co2Reduced","multipliers","clickMultiplier","passiveMultiplier","upgrades","id","name","description","baseCost","level","maxLevel","baseEffect","type","resource","unlocked","icon","unlockAt","achievements","condition","state","totalUpgrades","reduce","sum","upgrade","settings","soundEnabled","particlesEnabled","lastSaved","calculateUpgradeCost","Math","floor","pow","calculateTreePlantationPoints","treePlantation","find","u","calculatePointsPerSecond","filter","calculateClickValue","baseClick","clickBonus","useGameState","_useState","savedState","localStorage","getItem","JSON","parse","error","console","_useState2","_slicedToArray","gameState","setGameState","saveGame","stateToSave","_objectSpread","Date","toISOString","setItem","stringify","saveInterval","setInterval","clearInterval","pointsPerSecond","timer","prevState","treesToPlant","co2ToReduce","hasChanges","newState","map","achievement","handleClick","clickValue","purchaseUpgrade","upgradeId","upgradeIndex","findIndex","cost","newUpgrades","_toConsumableArray","newMultipliers","resetGame","window","confirm","removeItem","getUpgradeCost"],"sources":["C:/Users/Mkarten/Desktop/EcoClicker/src/hooks/useGameState.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\n// Define the initial game state\r\nconst initialState = {\r\n  resources: {\r\n    ecoPoints: 0,\r\n    carbonOffset: 0,\r\n    renewableEnergy: 0,\r\n  },\r\n  stats: {\r\n    totalClicks: 0,\r\n    totalEcoPoints: 0,\r\n    treesPlanted: 0,\r\n    co2Reduced: 0,\r\n  },\r\n  multipliers: {\r\n    clickMultiplier: 1,\r\n    passiveMultiplier: 1,\r\n  },\r\n  upgrades: [\r\n    {\r\n      id: 'solar_panel',\r\n      name: 'Solar Panel',\r\n      description: 'Generate 1 eco point per second',\r\n      baseCost: 10,\r\n      level: 0,\r\n      maxLevel: 50,\r\n      baseEffect: 1,\r\n      type: 'passive',\r\n      resource: 'ecoPoints',\r\n      unlocked: true,\r\n      icon: '☀️',\r\n    },\r\n    {\r\n      id: 'recycling_center',\r\n      name: 'Recycling Center',\r\n      description: 'Increase click value by 1',\r\n      baseCost: 25,\r\n      level: 0,\r\n      maxLevel: 30,\r\n      baseEffect: 1,\r\n      type: 'click',\r\n      resource: 'ecoPoints',\r\n      unlocked: true,\r\n      icon: '♻️',\r\n    },\r\n    {\r\n      id: 'tree_plantation',\r\n      name: 'Tree Plantation',\r\n      description: 'Plant trees and generate 5 eco points per second',\r\n      baseCost: 100,\r\n      level: 0,\r\n      maxLevel: 20,\r\n      baseEffect: 5,\r\n      type: 'passive',\r\n      resource: 'ecoPoints',\r\n      unlocked: false,\r\n      unlockAt: 50, // Unlock when player has 50 eco points\r\n      icon: '🌳',\r\n    },\r\n    {\r\n      id: 'wind_farm',\r\n      name: 'Wind Farm',\r\n      description: 'Generate 10 eco points per second',\r\n      baseCost: 250,\r\n      level: 0,\r\n      maxLevel: 15,\r\n      baseEffect: 10,\r\n      type: 'passive',\r\n      resource: 'ecoPoints',\r\n      unlocked: false,\r\n      unlockAt: 150,\r\n      icon: '🌬️',\r\n    },\r\n    {\r\n      id: 'eco_education',\r\n      name: 'Eco Education',\r\n      description: 'Increase all production by 10%',\r\n      baseCost: 500,\r\n      level: 0,\r\n      maxLevel: 10,\r\n      baseEffect: 0.1, // 10% increase\r\n      type: 'multiplier',\r\n      resource: 'ecoPoints',\r\n      unlocked: false,\r\n      unlockAt: 300,\r\n      icon: '📚',\r\n    },\r\n  ],\r\n  achievements: [\r\n    {\r\n      id: 'first_click',\r\n      name: 'First Step to Change',\r\n      description: 'Make your first eco-click',\r\n      unlocked: false,\r\n      condition: (state) => state.stats.totalClicks >= 1,\r\n      icon: '👆',\r\n    },\r\n    {\r\n      id: 'eco_warrior',\r\n      name: 'Eco Warrior',\r\n      description: 'Reach 100 eco points',\r\n      unlocked: false,\r\n      condition: (state) => state.stats.totalEcoPoints >= 100,\r\n      icon: '🌱',\r\n    },\r\n    {\r\n      id: 'environmental_hero',\r\n      name: 'Environmental Hero',\r\n      description: 'Reach 1000 eco points',\r\n      unlocked: false,\r\n      condition: (state) => state.stats.totalEcoPoints >= 1000,\r\n      icon: '🦸',\r\n    },\r\n    {\r\n      id: 'upgrade_master',\r\n      name: 'Upgrade Master',\r\n      description: 'Purchase 10 upgrades',\r\n      unlocked: false,\r\n      condition: (state) => {\r\n        const totalUpgrades = state.upgrades.reduce((sum, upgrade) => sum + upgrade.level, 0);\r\n        return totalUpgrades >= 10;\r\n      },\r\n      icon: '⬆️',\r\n    },\r\n  ],\r\n  settings: {\r\n    soundEnabled: true,\r\n    particlesEnabled: true,\r\n  },\r\n  lastSaved: null,\r\n};\r\n\r\n// Calculate upgrade cost based on base cost and current level\r\nconst calculateUpgradeCost = (baseCost, level) => {\r\n  return Math.floor(baseCost * Math.pow(1.15, level));\r\n};\r\n\r\n// Calculate points generated by Tree Plantation specifically\r\nconst calculateTreePlantationPoints = (upgrades, multipliers) => {\r\n  const treePlantation = upgrades.find(u => u.id === 'tree_plantation');\r\n  if (!treePlantation || treePlantation.level === 0) return 0;\r\n  return treePlantation.baseEffect * treePlantation.level * multipliers.passiveMultiplier;\r\n};\r\n\r\n// Calculate the total points per second from passive upgrades\r\nconst calculatePointsPerSecond = (upgrades, multipliers) => {\r\n  return upgrades\r\n    .filter(upgrade => upgrade.type === 'passive' && upgrade.level > 0)\r\n    .reduce((sum, upgrade) => sum + (upgrade.baseEffect * upgrade.level), 0) \r\n    * multipliers.passiveMultiplier;\r\n};\r\n\r\n// Calculate the click value based on upgrades\r\nconst calculateClickValue = (upgrades, multipliers) => {\r\n  const baseClick = 1;\r\n  const clickBonus = upgrades\r\n    .filter(upgrade => upgrade.type === 'click' && upgrade.level > 0)\r\n    .reduce((sum, upgrade) => sum + (upgrade.baseEffect * upgrade.level), 0);\r\n  \r\n  return (baseClick + clickBonus) * multipliers.clickMultiplier;\r\n};\r\n\r\nconst useGameState = () => {\r\n  const [gameState, setGameState] = useState(() => {\r\n    // Try to load the game state from localStorage\r\n    const savedState = localStorage.getItem('ecoClickerSave');\r\n    if (savedState) {\r\n      try {\r\n        return JSON.parse(savedState);\r\n      } catch (error) {\r\n        console.error('Failed to parse saved game state:', error);\r\n        return initialState;\r\n      }\r\n    }\r\n    return initialState;\r\n  });\r\n\r\n  // Save game state to localStorage whenever it changes\r\n  useEffect(() => {\r\n    const saveGame = () => {\r\n      const stateToSave = {\r\n        ...gameState,\r\n        lastSaved: new Date().toISOString(),\r\n      };\r\n      localStorage.setItem('ecoClickerSave', JSON.stringify(stateToSave));\r\n    };\r\n\r\n    // Save every 30 seconds\r\n    const saveInterval = setInterval(saveGame, 30000);\r\n    \r\n    // Save when the component unmounts\r\n    return () => {\r\n      clearInterval(saveInterval);\r\n      saveGame();\r\n    };\r\n  }, [gameState]);\r\n\r\n  // Passive income effect - runs every second\r\n  useEffect(() => {\r\n    const pointsPerSecond = calculatePointsPerSecond(gameState.upgrades, gameState.multipliers);\r\n    \r\n    if (pointsPerSecond > 0) {\r\n      const timer = setInterval(() => {\r\n        setGameState(prevState => {\r\n          // Find the tree plantation upgrade to link tree planting directly to it\r\n          const treePlantation = prevState.upgrades.find(u => u.id === 'tree_plantation');\r\n          \r\n          // Calculate trees planted based only on the Tree Plantation upgrade\r\n          // Each level plants 0.1 trees per second\r\n          const treesToPlant = treePlantation && treePlantation.level > 0 \r\n            ? treePlantation.level * 0.1 \r\n            : 0;\r\n          \r\n          // CO2 reduction is still based on all eco points (0.05kg per point)\r\n          const co2ToReduce = pointsPerSecond * 0.05;\r\n          \r\n          return {\r\n            ...prevState,\r\n            resources: {\r\n              ...prevState.resources,\r\n              ecoPoints: prevState.resources.ecoPoints + pointsPerSecond,\r\n            },\r\n            stats: {\r\n              ...prevState.stats,\r\n              totalEcoPoints: prevState.stats.totalEcoPoints + pointsPerSecond,\r\n              treesPlanted: prevState.stats.treesPlanted + treesToPlant,\r\n              co2Reduced: prevState.stats.co2Reduced + co2ToReduce,\r\n            },\r\n          };\r\n        });\r\n      }, 1000);\r\n      \r\n      return () => clearInterval(timer);\r\n    }\r\n  }, [gameState.upgrades, gameState.multipliers]);\r\n\r\n  // Check for newly unlocked upgrades and achievements\r\n  useEffect(() => {\r\n    let hasChanges = false;\r\n    const newState = { ...gameState };\r\n\r\n    // Check for upgrades to unlock\r\n    newState.upgrades = gameState.upgrades.map(upgrade => {\r\n      if (!upgrade.unlocked && upgrade.unlockAt && gameState.resources.ecoPoints >= upgrade.unlockAt) {\r\n        hasChanges = true;\r\n        return { ...upgrade, unlocked: true };\r\n      }\r\n      return upgrade;\r\n    });\r\n\r\n    // Check for achievements to unlock\r\n    newState.achievements = gameState.achievements.map(achievement => {\r\n      if (!achievement.unlocked && achievement.condition(gameState)) {\r\n        hasChanges = true;\r\n        return { ...achievement, unlocked: true };\r\n      }\r\n      return achievement;\r\n    });\r\n\r\n    if (hasChanges) {\r\n      setGameState(newState);\r\n    }\r\n  }, [gameState]);\r\n\r\n  // Handle clicking on the main clicker area\r\n  const handleClick = () => {\r\n    const clickValue = calculateClickValue(gameState.upgrades, gameState.multipliers);\r\n    \r\n    // CO2 reduction is still based on all eco points (0.05kg per point)\r\n    const co2ToReduce = clickValue * 0.05;\r\n    \r\n    setGameState(prevState => ({\r\n      ...prevState,\r\n      resources: {\r\n        ...prevState.resources,\r\n        ecoPoints: prevState.resources.ecoPoints + clickValue,\r\n      },\r\n      stats: {\r\n        ...prevState.stats,\r\n        totalClicks: prevState.stats.totalClicks + 1,\r\n        totalEcoPoints: prevState.stats.totalEcoPoints + clickValue,\r\n        // No trees planted from clicking - only from Tree Plantation upgrade\r\n        co2Reduced: prevState.stats.co2Reduced + co2ToReduce,\r\n      },\r\n    }));\r\n  };\r\n\r\n  // Handle purchasing an upgrade\r\n  const purchaseUpgrade = (upgradeId) => {\r\n    const upgradeIndex = gameState.upgrades.findIndex(u => u.id === upgradeId);\r\n    \r\n    if (upgradeIndex === -1) return false;\r\n    \r\n    const upgrade = gameState.upgrades[upgradeIndex];\r\n    \r\n    // Check if we can purchase this upgrade\r\n    if (upgrade.level >= upgrade.maxLevel) return false;\r\n    \r\n    const cost = calculateUpgradeCost(upgrade.baseCost, upgrade.level);\r\n    \r\n    if (gameState.resources.ecoPoints < cost) return false;\r\n    \r\n    const newUpgrades = [...gameState.upgrades];\r\n    newUpgrades[upgradeIndex] = {\r\n      ...upgrade,\r\n      level: upgrade.level + 1,\r\n    };\r\n    \r\n    // Update multipliers if it's a multiplier upgrade\r\n    let newMultipliers = { ...gameState.multipliers };\r\n    if (upgrade.type === 'multiplier') {\r\n      newMultipliers = {\r\n        clickMultiplier: gameState.multipliers.clickMultiplier + upgrade.baseEffect,\r\n        passiveMultiplier: gameState.multipliers.passiveMultiplier + upgrade.baseEffect,\r\n      };\r\n    }\r\n    \r\n    setGameState(prevState => ({\r\n      ...prevState,\r\n      resources: {\r\n        ...prevState.resources,\r\n        ecoPoints: prevState.resources.ecoPoints - cost,\r\n      },\r\n      upgrades: newUpgrades,\r\n      multipliers: newMultipliers,\r\n    }));\r\n    \r\n    return true;\r\n  };\r\n\r\n  // Reset the game\r\n  const resetGame = () => {\r\n    if (window.confirm('Are you sure you want to reset your progress? This cannot be undone.')) {\r\n      localStorage.removeItem('ecoClickerSave');\r\n      setGameState(initialState);\r\n    }\r\n  };\r\n\r\n  return {\r\n    gameState,\r\n    handleClick,\r\n    purchaseUpgrade,\r\n    resetGame,\r\n    pointsPerSecond: calculatePointsPerSecond(gameState.upgrades, gameState.multipliers),\r\n    clickValue: calculateClickValue(gameState.upgrades, gameState.multipliers),\r\n    getUpgradeCost: (upgradeId) => {\r\n      const upgrade = gameState.upgrades.find(u => u.id === upgradeId);\r\n      if (!upgrade) return null;\r\n      return calculateUpgradeCost(upgrade.baseCost, upgrade.level);\r\n    },\r\n  };\r\n};\r\n\r\nexport default useGameState;"],"mappings":";;;;;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAG3C,IAAMC,YAAY,GAAG;EACnBC,SAAS,EAAE;IACTC,SAAS,EAAE,CAAC;IACZC,YAAY,EAAE,CAAC;IACfC,eAAe,EAAE;EACnB,CAAC;EACDC,KAAK,EAAE;IACLC,WAAW,EAAE,CAAC;IACdC,cAAc,EAAE,CAAC;IACjBC,YAAY,EAAE,CAAC;IACfC,UAAU,EAAE;EACd,CAAC;EACDC,WAAW,EAAE;IACXC,eAAe,EAAE,CAAC;IAClBC,iBAAiB,EAAE;EACrB,CAAC;EACDC,QAAQ,EAAE,CACR;IACEC,EAAE,EAAE,aAAa;IACjBC,IAAI,EAAE,aAAa;IACnBC,WAAW,EAAE,iCAAiC;IAC9CC,QAAQ,EAAE,EAAE;IACZC,KAAK,EAAE,CAAC;IACRC,QAAQ,EAAE,EAAE;IACZC,UAAU,EAAE,CAAC;IACbC,IAAI,EAAE,SAAS;IACfC,QAAQ,EAAE,WAAW;IACrBC,QAAQ,EAAE,IAAI;IACdC,IAAI,EAAE;EACR,CAAC,EACD;IACEV,EAAE,EAAE,kBAAkB;IACtBC,IAAI,EAAE,kBAAkB;IACxBC,WAAW,EAAE,2BAA2B;IACxCC,QAAQ,EAAE,EAAE;IACZC,KAAK,EAAE,CAAC;IACRC,QAAQ,EAAE,EAAE;IACZC,UAAU,EAAE,CAAC;IACbC,IAAI,EAAE,OAAO;IACbC,QAAQ,EAAE,WAAW;IACrBC,QAAQ,EAAE,IAAI;IACdC,IAAI,EAAE;EACR,CAAC,EACD;IACEV,EAAE,EAAE,iBAAiB;IACrBC,IAAI,EAAE,iBAAiB;IACvBC,WAAW,EAAE,kDAAkD;IAC/DC,QAAQ,EAAE,GAAG;IACbC,KAAK,EAAE,CAAC;IACRC,QAAQ,EAAE,EAAE;IACZC,UAAU,EAAE,CAAC;IACbC,IAAI,EAAE,SAAS;IACfC,QAAQ,EAAE,WAAW;IACrBC,QAAQ,EAAE,KAAK;IACfE,QAAQ,EAAE,EAAE;IACZD,IAAI,EAAE;EACR,CAAC,EACD;IACEV,EAAE,EAAE,WAAW;IACfC,IAAI,EAAE,WAAW;IACjBC,WAAW,EAAE,mCAAmC;IAChDC,QAAQ,EAAE,GAAG;IACbC,KAAK,EAAE,CAAC;IACRC,QAAQ,EAAE,EAAE;IACZC,UAAU,EAAE,EAAE;IACdC,IAAI,EAAE,SAAS;IACfC,QAAQ,EAAE,WAAW;IACrBC,QAAQ,EAAE,KAAK;IACfE,QAAQ,EAAE,GAAG;IACbD,IAAI,EAAE;EACR,CAAC,EACD;IACEV,EAAE,EAAE,eAAe;IACnBC,IAAI,EAAE,eAAe;IACrBC,WAAW,EAAE,gCAAgC;IAC7CC,QAAQ,EAAE,GAAG;IACbC,KAAK,EAAE,CAAC;IACRC,QAAQ,EAAE,EAAE;IACZC,UAAU,EAAE,GAAG;IACfC,IAAI,EAAE,YAAY;IAClBC,QAAQ,EAAE,WAAW;IACrBC,QAAQ,EAAE,KAAK;IACfE,QAAQ,EAAE,GAAG;IACbD,IAAI,EAAE;EACR,CAAC,CACF;EACDE,YAAY,EAAE,CACZ;IACEZ,EAAE,EAAE,aAAa;IACjBC,IAAI,EAAE,sBAAsB;IAC5BC,WAAW,EAAE,2BAA2B;IACxCO,QAAQ,EAAE,KAAK;IACfI,SAAS,EAAE,SAAXA,SAASA,CAAGC,KAAK;MAAA,OAAKA,KAAK,CAACvB,KAAK,CAACC,WAAW,IAAI,CAAC;IAAA;IAClDkB,IAAI,EAAE;EACR,CAAC,EACD;IACEV,EAAE,EAAE,aAAa;IACjBC,IAAI,EAAE,aAAa;IACnBC,WAAW,EAAE,sBAAsB;IACnCO,QAAQ,EAAE,KAAK;IACfI,SAAS,EAAE,SAAXA,SAASA,CAAGC,KAAK;MAAA,OAAKA,KAAK,CAACvB,KAAK,CAACE,cAAc,IAAI,GAAG;IAAA;IACvDiB,IAAI,EAAE;EACR,CAAC,EACD;IACEV,EAAE,EAAE,oBAAoB;IACxBC,IAAI,EAAE,oBAAoB;IAC1BC,WAAW,EAAE,uBAAuB;IACpCO,QAAQ,EAAE,KAAK;IACfI,SAAS,EAAE,SAAXA,SAASA,CAAGC,KAAK;MAAA,OAAKA,KAAK,CAACvB,KAAK,CAACE,cAAc,IAAI,IAAI;IAAA;IACxDiB,IAAI,EAAE;EACR,CAAC,EACD;IACEV,EAAE,EAAE,gBAAgB;IACpBC,IAAI,EAAE,gBAAgB;IACtBC,WAAW,EAAE,sBAAsB;IACnCO,QAAQ,EAAE,KAAK;IACfI,SAAS,EAAE,SAAXA,SAASA,CAAGC,KAAK,EAAK;MACpB,IAAMC,aAAa,GAAGD,KAAK,CAACf,QAAQ,CAACiB,MAAM,CAAC,UAACC,GAAG,EAAEC,OAAO;QAAA,OAAKD,GAAG,GAAGC,OAAO,CAACd,KAAK;MAAA,GAAE,CAAC,CAAC;MACrF,OAAOW,aAAa,IAAI,EAAE;IAC5B,CAAC;IACDL,IAAI,EAAE;EACR,CAAC,CACF;EACDS,QAAQ,EAAE;IACRC,YAAY,EAAE,IAAI;IAClBC,gBAAgB,EAAE;EACpB,CAAC;EACDC,SAAS,EAAE;AACb,CAAC;AAGD,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAoBA,CAAIpB,QAAQ,EAAEC,KAAK,EAAK;EAChD,OAAOoB,IAAI,CAACC,KAAK,CAACtB,QAAQ,GAAGqB,IAAI,CAACE,GAAG,CAAC,IAAI,EAAEtB,KAAK,CAAC,CAAC;AACrD,CAAC;AAGD,IAAMuB,6BAA6B,GAAG,SAAhCA,6BAA6BA,CAAI5B,QAAQ,EAAEH,WAAW,EAAK;EAC/D,IAAMgC,cAAc,GAAG7B,QAAQ,CAAC8B,IAAI,CAAC,UAAAC,CAAC;IAAA,OAAIA,CAAC,CAAC9B,EAAE,KAAK,iBAAiB;EAAA,EAAC;EACrE,IAAI,CAAC4B,cAAc,IAAIA,cAAc,CAACxB,KAAK,KAAK,CAAC,EAAE,OAAO,CAAC;EAC3D,OAAOwB,cAAc,CAACtB,UAAU,GAAGsB,cAAc,CAACxB,KAAK,GAAGR,WAAW,CAACE,iBAAiB;AACzF,CAAC;AAGD,IAAMiC,wBAAwB,GAAG,SAA3BA,wBAAwBA,CAAIhC,QAAQ,EAAEH,WAAW,EAAK;EAC1D,OAAOG,QAAQ,CACZiC,MAAM,CAAC,UAAAd,OAAO;IAAA,OAAIA,OAAO,CAACX,IAAI,KAAK,SAAS,IAAIW,OAAO,CAACd,KAAK,GAAG,CAAC;EAAA,EAAC,CAClEY,MAAM,CAAC,UAACC,GAAG,EAAEC,OAAO;IAAA,OAAKD,GAAG,GAAIC,OAAO,CAACZ,UAAU,GAAGY,OAAO,CAACd,KAAM;EAAA,GAAE,CAAC,CAAC,GACtER,WAAW,CAACE,iBAAiB;AACnC,CAAC;AAGD,IAAMmC,mBAAmB,GAAG,SAAtBA,mBAAmBA,CAAIlC,QAAQ,EAAEH,WAAW,EAAK;EACrD,IAAMsC,SAAS,GAAG,CAAC;EACnB,IAAMC,UAAU,GAAGpC,QAAQ,CACxBiC,MAAM,CAAC,UAAAd,OAAO;IAAA,OAAIA,OAAO,CAACX,IAAI,KAAK,OAAO,IAAIW,OAAO,CAACd,KAAK,GAAG,CAAC;EAAA,EAAC,CAChEY,MAAM,CAAC,UAACC,GAAG,EAAEC,OAAO;IAAA,OAAKD,GAAG,GAAIC,OAAO,CAACZ,UAAU,GAAGY,OAAO,CAACd,KAAM;EAAA,GAAE,CAAC,CAAC;EAE1E,OAAO,CAAC8B,SAAS,GAAGC,UAAU,IAAIvC,WAAW,CAACC,eAAe;AAC/D,CAAC;AAED,IAAMuC,YAAY,GAAG,SAAfA,YAAYA,CAAA,EAAS;EACzB,IAAAC,SAAA,GAAkCrD,QAAQ,CAAC,YAAM;MAE/C,IAAMsD,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,gBAAgB,CAAC;MACzD,IAAIF,UAAU,EAAE;QACd,IAAI;UACF,OAAOG,IAAI,CAACC,KAAK,CAACJ,UAAU,CAAC;QAC/B,CAAC,CAAC,OAAOK,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;UACzD,OAAOzD,YAAY;QACrB;MACF;MACA,OAAOA,YAAY;IACrB,CAAC,CAAC;IAAA2D,UAAA,GAAAC,cAAA,CAAAT,SAAA;IAZKU,SAAS,GAAAF,UAAA;IAAEG,YAAY,GAAAH,UAAA;EAe9B5D,SAAS,CAAC,YAAM;IACd,IAAMgE,QAAQ,GAAG,SAAXA,QAAQA,CAAA,EAAS;MACrB,IAAMC,WAAW,GAAAC,aAAA,CAAAA,aAAA,KACZJ,SAAS;QACZzB,SAAS,EAAE,IAAI8B,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MAAC,EACpC;MACDd,YAAY,CAACe,OAAO,CAAC,gBAAgB,EAAEb,IAAI,CAACc,SAAS,CAACL,WAAW,CAAC,CAAC;IACrE,CAAC;IAGD,IAAMM,YAAY,GAAGC,WAAW,CAACR,QAAQ,EAAE,KAAK,CAAC;IAGjD,OAAO,YAAM;MACXS,aAAa,CAACF,YAAY,CAAC;MAC3BP,QAAQ,CAAC,CAAC;IACZ,CAAC;EACH,CAAC,EAAE,CAACF,SAAS,CAAC,CAAC;EAGf9D,SAAS,CAAC,YAAM;IACd,IAAM0E,eAAe,GAAG5B,wBAAwB,CAACgB,SAAS,CAAChD,QAAQ,EAAEgD,SAAS,CAACnD,WAAW,CAAC;IAE3F,IAAI+D,eAAe,GAAG,CAAC,EAAE;MACvB,IAAMC,KAAK,GAAGH,WAAW,CAAC,YAAM;QAC9BT,YAAY,CAAC,UAAAa,SAAS,EAAI;UAExB,IAAMjC,cAAc,GAAGiC,SAAS,CAAC9D,QAAQ,CAAC8B,IAAI,CAAC,UAAAC,CAAC;YAAA,OAAIA,CAAC,CAAC9B,EAAE,KAAK,iBAAiB;UAAA,EAAC;UAI/E,IAAM8D,YAAY,GAAGlC,cAAc,IAAIA,cAAc,CAACxB,KAAK,GAAG,CAAC,GAC3DwB,cAAc,CAACxB,KAAK,GAAG,GAAG,GAC1B,CAAC;UAGL,IAAM2D,WAAW,GAAGJ,eAAe,GAAG,IAAI;UAE1C,OAAAR,aAAA,CAAAA,aAAA,KACKU,SAAS;YACZ1E,SAAS,EAAAgE,aAAA,CAAAA,aAAA,KACJU,SAAS,CAAC1E,SAAS;cACtBC,SAAS,EAAEyE,SAAS,CAAC1E,SAAS,CAACC,SAAS,GAAGuE;YAAe,EAC3D;YACDpE,KAAK,EAAA4D,aAAA,CAAAA,aAAA,KACAU,SAAS,CAACtE,KAAK;cAClBE,cAAc,EAAEoE,SAAS,CAACtE,KAAK,CAACE,cAAc,GAAGkE,eAAe;cAChEjE,YAAY,EAAEmE,SAAS,CAACtE,KAAK,CAACG,YAAY,GAAGoE,YAAY;cACzDnE,UAAU,EAAEkE,SAAS,CAACtE,KAAK,CAACI,UAAU,GAAGoE;YAAW;UACrD;QAEL,CAAC,CAAC;MACJ,CAAC,EAAE,IAAI,CAAC;MAER,OAAO;QAAA,OAAML,aAAa,CAACE,KAAK,CAAC;MAAA;IACnC;EACF,CAAC,EAAE,CAACb,SAAS,CAAChD,QAAQ,EAAEgD,SAAS,CAACnD,WAAW,CAAC,CAAC;EAG/CX,SAAS,CAAC,YAAM;IACd,IAAI+E,UAAU,GAAG,KAAK;IACtB,IAAMC,QAAQ,GAAAd,aAAA,KAAQJ,SAAS,CAAE;IAGjCkB,QAAQ,CAAClE,QAAQ,GAAGgD,SAAS,CAAChD,QAAQ,CAACmE,GAAG,CAAC,UAAAhD,OAAO,EAAI;MACpD,IAAI,CAACA,OAAO,CAACT,QAAQ,IAAIS,OAAO,CAACP,QAAQ,IAAIoC,SAAS,CAAC5D,SAAS,CAACC,SAAS,IAAI8B,OAAO,CAACP,QAAQ,EAAE;QAC9FqD,UAAU,GAAG,IAAI;QACjB,OAAAb,aAAA,CAAAA,aAAA,KAAYjC,OAAO;UAAET,QAAQ,EAAE;QAAI;MACrC;MACA,OAAOS,OAAO;IAChB,CAAC,CAAC;IAGF+C,QAAQ,CAACrD,YAAY,GAAGmC,SAAS,CAACnC,YAAY,CAACsD,GAAG,CAAC,UAAAC,WAAW,EAAI;MAChE,IAAI,CAACA,WAAW,CAAC1D,QAAQ,IAAI0D,WAAW,CAACtD,SAAS,CAACkC,SAAS,CAAC,EAAE;QAC7DiB,UAAU,GAAG,IAAI;QACjB,OAAAb,aAAA,CAAAA,aAAA,KAAYgB,WAAW;UAAE1D,QAAQ,EAAE;QAAI;MACzC;MACA,OAAO0D,WAAW;IACpB,CAAC,CAAC;IAEF,IAAIH,UAAU,EAAE;MACdhB,YAAY,CAACiB,QAAQ,CAAC;IACxB;EACF,CAAC,EAAE,CAAClB,SAAS,CAAC,CAAC;EAGf,IAAMqB,WAAW,GAAG,SAAdA,WAAWA,CAAA,EAAS;IACxB,IAAMC,UAAU,GAAGpC,mBAAmB,CAACc,SAAS,CAAChD,QAAQ,EAAEgD,SAAS,CAACnD,WAAW,CAAC;IAGjF,IAAMmE,WAAW,GAAGM,UAAU,GAAG,IAAI;IAErCrB,YAAY,CAAC,UAAAa,SAAS;MAAA,OAAAV,aAAA,CAAAA,aAAA,KACjBU,SAAS;QACZ1E,SAAS,EAAAgE,aAAA,CAAAA,aAAA,KACJU,SAAS,CAAC1E,SAAS;UACtBC,SAAS,EAAEyE,SAAS,CAAC1E,SAAS,CAACC,SAAS,GAAGiF;QAAU,EACtD;QACD9E,KAAK,EAAA4D,aAAA,CAAAA,aAAA,KACAU,SAAS,CAACtE,KAAK;UAClBC,WAAW,EAAEqE,SAAS,CAACtE,KAAK,CAACC,WAAW,GAAG,CAAC;UAC5CC,cAAc,EAAEoE,SAAS,CAACtE,KAAK,CAACE,cAAc,GAAG4E,UAAU;UAE3D1E,UAAU,EAAEkE,SAAS,CAACtE,KAAK,CAACI,UAAU,GAAGoE;QAAW;MACrD;IAAA,CACD,CAAC;EACL,CAAC;EAGD,IAAMO,eAAe,GAAG,SAAlBA,eAAeA,CAAIC,SAAS,EAAK;IACrC,IAAMC,YAAY,GAAGzB,SAAS,CAAChD,QAAQ,CAAC0E,SAAS,CAAC,UAAA3C,CAAC;MAAA,OAAIA,CAAC,CAAC9B,EAAE,KAAKuE,SAAS;IAAA,EAAC;IAE1E,IAAIC,YAAY,KAAK,CAAC,CAAC,EAAE,OAAO,KAAK;IAErC,IAAMtD,OAAO,GAAG6B,SAAS,CAAChD,QAAQ,CAACyE,YAAY,CAAC;IAGhD,IAAItD,OAAO,CAACd,KAAK,IAAIc,OAAO,CAACb,QAAQ,EAAE,OAAO,KAAK;IAEnD,IAAMqE,IAAI,GAAGnD,oBAAoB,CAACL,OAAO,CAACf,QAAQ,EAAEe,OAAO,CAACd,KAAK,CAAC;IAElE,IAAI2C,SAAS,CAAC5D,SAAS,CAACC,SAAS,GAAGsF,IAAI,EAAE,OAAO,KAAK;IAEtD,IAAMC,WAAW,GAAAC,kBAAA,CAAO7B,SAAS,CAAChD,QAAQ,CAAC;IAC3C4E,WAAW,CAACH,YAAY,CAAC,GAAArB,aAAA,CAAAA,aAAA,KACpBjC,OAAO;MACVd,KAAK,EAAEc,OAAO,CAACd,KAAK,GAAG;IAAC,EACzB;IAGD,IAAIyE,cAAc,GAAA1B,aAAA,KAAQJ,SAAS,CAACnD,WAAW,CAAE;IACjD,IAAIsB,OAAO,CAACX,IAAI,KAAK,YAAY,EAAE;MACjCsE,cAAc,GAAG;QACfhF,eAAe,EAAEkD,SAAS,CAACnD,WAAW,CAACC,eAAe,GAAGqB,OAAO,CAACZ,UAAU;QAC3ER,iBAAiB,EAAEiD,SAAS,CAACnD,WAAW,CAACE,iBAAiB,GAAGoB,OAAO,CAACZ;MACvE,CAAC;IACH;IAEA0C,YAAY,CAAC,UAAAa,SAAS;MAAA,OAAAV,aAAA,CAAAA,aAAA,KACjBU,SAAS;QACZ1E,SAAS,EAAAgE,aAAA,CAAAA,aAAA,KACJU,SAAS,CAAC1E,SAAS;UACtBC,SAAS,EAAEyE,SAAS,CAAC1E,SAAS,CAACC,SAAS,GAAGsF;QAAI,EAChD;QACD3E,QAAQ,EAAE4E,WAAW;QACrB/E,WAAW,EAAEiF;MAAc;IAAA,CAC3B,CAAC;IAEH,OAAO,IAAI;EACb,CAAC;EAGD,IAAMC,SAAS,GAAG,SAAZA,SAASA,CAAA,EAAS;IACtB,IAAIC,MAAM,CAACC,OAAO,CAAC,sEAAsE,CAAC,EAAE;MAC1FzC,YAAY,CAAC0C,UAAU,CAAC,gBAAgB,CAAC;MACzCjC,YAAY,CAAC9D,YAAY,CAAC;IAC5B;EACF,CAAC;EAED,OAAO;IACL6D,SAAS,EAATA,SAAS;IACTqB,WAAW,EAAXA,WAAW;IACXE,eAAe,EAAfA,eAAe;IACfQ,SAAS,EAATA,SAAS;IACTnB,eAAe,EAAE5B,wBAAwB,CAACgB,SAAS,CAAChD,QAAQ,EAAEgD,SAAS,CAACnD,WAAW,CAAC;IACpFyE,UAAU,EAAEpC,mBAAmB,CAACc,SAAS,CAAChD,QAAQ,EAAEgD,SAAS,CAACnD,WAAW,CAAC;IAC1EsF,cAAc,EAAE,SAAhBA,cAAcA,CAAGX,SAAS,EAAK;MAC7B,IAAMrD,OAAO,GAAG6B,SAAS,CAAChD,QAAQ,CAAC8B,IAAI,CAAC,UAAAC,CAAC;QAAA,OAAIA,CAAC,CAAC9B,EAAE,KAAKuE,SAAS;MAAA,EAAC;MAChE,IAAI,CAACrD,OAAO,EAAE,OAAO,IAAI;MACzB,OAAOK,oBAAoB,CAACL,OAAO,CAACf,QAAQ,EAAEe,OAAO,CAACd,KAAK,CAAC;IAC9D;EACF,CAAC;AACH,CAAC;AAED,eAAegC,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}